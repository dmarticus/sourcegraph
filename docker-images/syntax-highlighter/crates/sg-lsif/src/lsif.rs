// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `lib/codeintel/lsif_typed/lsif.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct Index {
    // message fields
    pub metadata: ::protobuf::SingularPtrField<Metadata>,
    pub documents: ::protobuf::RepeatedField<Document>,
    pub external_symbols: ::protobuf::RepeatedField<SymbolInformation>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Index {
    fn default() -> &'a Index {
        <Index as ::protobuf::Message>::default_instance()
    }
}

impl Index {
    pub fn new() -> Index {
        ::std::default::Default::default()
    }

    // .lib.codeintel.lsif_typed.Metadata metadata = 1;


    pub fn get_metadata(&self) -> &Metadata {
        self.metadata.as_ref().unwrap_or_else(|| <Metadata as ::protobuf::Message>::default_instance())
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: Metadata) {
        self.metadata = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut Metadata {
        if self.metadata.is_none() {
            self.metadata.set_default();
        }
        self.metadata.as_mut().unwrap()
    }

    // Take field
    pub fn take_metadata(&mut self) -> Metadata {
        self.metadata.take().unwrap_or_else(|| Metadata::new())
    }

    // repeated .lib.codeintel.lsif_typed.Document documents = 2;


    pub fn get_documents(&self) -> &[Document] {
        &self.documents
    }
    pub fn clear_documents(&mut self) {
        self.documents.clear();
    }

    // Param is passed by value, moved
    pub fn set_documents(&mut self, v: ::protobuf::RepeatedField<Document>) {
        self.documents = v;
    }

    // Mutable pointer to the field.
    pub fn mut_documents(&mut self) -> &mut ::protobuf::RepeatedField<Document> {
        &mut self.documents
    }

    // Take field
    pub fn take_documents(&mut self) -> ::protobuf::RepeatedField<Document> {
        ::std::mem::replace(&mut self.documents, ::protobuf::RepeatedField::new())
    }

    // repeated .lib.codeintel.lsif_typed.SymbolInformation external_symbols = 3;


    pub fn get_external_symbols(&self) -> &[SymbolInformation] {
        &self.external_symbols
    }
    pub fn clear_external_symbols(&mut self) {
        self.external_symbols.clear();
    }

    // Param is passed by value, moved
    pub fn set_external_symbols(&mut self, v: ::protobuf::RepeatedField<SymbolInformation>) {
        self.external_symbols = v;
    }

    // Mutable pointer to the field.
    pub fn mut_external_symbols(&mut self) -> &mut ::protobuf::RepeatedField<SymbolInformation> {
        &mut self.external_symbols
    }

    // Take field
    pub fn take_external_symbols(&mut self) -> ::protobuf::RepeatedField<SymbolInformation> {
        ::std::mem::replace(&mut self.external_symbols, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Index {
    fn is_initialized(&self) -> bool {
        for v in &self.metadata {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.documents {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.external_symbols {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.metadata)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.documents)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.external_symbols)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.documents {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.external_symbols {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.metadata.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.documents {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.external_symbols {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Index {
        Index::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Metadata>>(
                "metadata",
                |m: &Index| { &m.metadata },
                |m: &mut Index| { &mut m.metadata },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Document>>(
                "documents",
                |m: &Index| { &m.documents },
                |m: &mut Index| { &mut m.documents },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SymbolInformation>>(
                "external_symbols",
                |m: &Index| { &m.external_symbols },
                |m: &mut Index| { &mut m.external_symbols },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Index>(
                "Index",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Index {
        static instance: ::protobuf::rt::LazyV2<Index> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Index::new)
    }
}

impl ::protobuf::Clear for Index {
    fn clear(&mut self) {
        self.metadata.clear();
        self.documents.clear();
        self.external_symbols.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Index {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Index {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Metadata {
    // message fields
    pub version: ProtocolVersion,
    pub tool_info: ::protobuf::SingularPtrField<ToolInfo>,
    pub project_root: ::std::string::String,
    pub text_document_encoding: TextEncoding,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Metadata {
    fn default() -> &'a Metadata {
        <Metadata as ::protobuf::Message>::default_instance()
    }
}

impl Metadata {
    pub fn new() -> Metadata {
        ::std::default::Default::default()
    }

    // .lib.codeintel.lsif_typed.ProtocolVersion version = 1;


    pub fn get_version(&self) -> ProtocolVersion {
        self.version
    }
    pub fn clear_version(&mut self) {
        self.version = ProtocolVersion::UnspecifiedProtocolVersion;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ProtocolVersion) {
        self.version = v;
    }

    // .lib.codeintel.lsif_typed.ToolInfo tool_info = 2;


    pub fn get_tool_info(&self) -> &ToolInfo {
        self.tool_info.as_ref().unwrap_or_else(|| <ToolInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tool_info(&mut self) {
        self.tool_info.clear();
    }

    pub fn has_tool_info(&self) -> bool {
        self.tool_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tool_info(&mut self, v: ToolInfo) {
        self.tool_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tool_info(&mut self) -> &mut ToolInfo {
        if self.tool_info.is_none() {
            self.tool_info.set_default();
        }
        self.tool_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_tool_info(&mut self) -> ToolInfo {
        self.tool_info.take().unwrap_or_else(|| ToolInfo::new())
    }

    // string project_root = 3;


    pub fn get_project_root(&self) -> &str {
        &self.project_root
    }
    pub fn clear_project_root(&mut self) {
        self.project_root.clear();
    }

    // Param is passed by value, moved
    pub fn set_project_root(&mut self, v: ::std::string::String) {
        self.project_root = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_project_root(&mut self) -> &mut ::std::string::String {
        &mut self.project_root
    }

    // Take field
    pub fn take_project_root(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.project_root, ::std::string::String::new())
    }

    // .lib.codeintel.lsif_typed.TextEncoding text_document_encoding = 4;


    pub fn get_text_document_encoding(&self) -> TextEncoding {
        self.text_document_encoding
    }
    pub fn clear_text_document_encoding(&mut self) {
        self.text_document_encoding = TextEncoding::UnspecifiedTextEncoding;
    }

    // Param is passed by value, moved
    pub fn set_text_document_encoding(&mut self, v: TextEncoding) {
        self.text_document_encoding = v;
    }
}

impl ::protobuf::Message for Metadata {
    fn is_initialized(&self) -> bool {
        for v in &self.tool_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.version, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tool_info)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.project_root)?;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.text_document_encoding, 4, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.version != ProtocolVersion::UnspecifiedProtocolVersion {
            my_size += ::protobuf::rt::enum_size(1, self.version);
        }
        if let Some(ref v) = self.tool_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.project_root.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.project_root);
        }
        if self.text_document_encoding != TextEncoding::UnspecifiedTextEncoding {
            my_size += ::protobuf::rt::enum_size(4, self.text_document_encoding);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.version != ProtocolVersion::UnspecifiedProtocolVersion {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.version))?;
        }
        if let Some(ref v) = self.tool_info.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.project_root.is_empty() {
            os.write_string(3, &self.project_root)?;
        }
        if self.text_document_encoding != TextEncoding::UnspecifiedTextEncoding {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.text_document_encoding))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Metadata {
        Metadata::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ProtocolVersion>>(
                "version",
                |m: &Metadata| { &m.version },
                |m: &mut Metadata| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ToolInfo>>(
                "tool_info",
                |m: &Metadata| { &m.tool_info },
                |m: &mut Metadata| { &mut m.tool_info },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "project_root",
                |m: &Metadata| { &m.project_root },
                |m: &mut Metadata| { &mut m.project_root },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TextEncoding>>(
                "text_document_encoding",
                |m: &Metadata| { &m.text_document_encoding },
                |m: &mut Metadata| { &mut m.text_document_encoding },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Metadata>(
                "Metadata",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Metadata {
        static instance: ::protobuf::rt::LazyV2<Metadata> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Metadata::new)
    }
}

impl ::protobuf::Clear for Metadata {
    fn clear(&mut self) {
        self.version = ProtocolVersion::UnspecifiedProtocolVersion;
        self.tool_info.clear();
        self.project_root.clear();
        self.text_document_encoding = TextEncoding::UnspecifiedTextEncoding;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Metadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Metadata {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ToolInfo {
    // message fields
    pub name: ::std::string::String,
    pub version: ::std::string::String,
    pub arguments: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ToolInfo {
    fn default() -> &'a ToolInfo {
        <ToolInfo as ::protobuf::Message>::default_instance()
    }
}

impl ToolInfo {
    pub fn new() -> ToolInfo {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string version = 2;


    pub fn get_version(&self) -> &str {
        &self.version
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }

    // repeated string arguments = 3;


    pub fn get_arguments(&self) -> &[::std::string::String] {
        &self.arguments
    }
    pub fn clear_arguments(&mut self) {
        self.arguments.clear();
    }

    // Param is passed by value, moved
    pub fn set_arguments(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.arguments = v;
    }

    // Mutable pointer to the field.
    pub fn mut_arguments(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.arguments
    }

    // Take field
    pub fn take_arguments(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.arguments, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ToolInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.arguments)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.version);
        }
        for value in &self.arguments {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.version.is_empty() {
            os.write_string(2, &self.version)?;
        }
        for v in &self.arguments {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ToolInfo {
        ToolInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &ToolInfo| { &m.name },
                |m: &mut ToolInfo| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "version",
                |m: &ToolInfo| { &m.version },
                |m: &mut ToolInfo| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "arguments",
                |m: &ToolInfo| { &m.arguments },
                |m: &mut ToolInfo| { &mut m.arguments },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ToolInfo>(
                "ToolInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ToolInfo {
        static instance: ::protobuf::rt::LazyV2<ToolInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ToolInfo::new)
    }
}

impl ::protobuf::Clear for ToolInfo {
    fn clear(&mut self) {
        self.name.clear();
        self.version.clear();
        self.arguments.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ToolInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ToolInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Document {
    // message fields
    pub relative_path: ::std::string::String,
    pub occurrences: ::protobuf::RepeatedField<Occurrence>,
    pub symbols: ::protobuf::RepeatedField<SymbolInformation>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Document {
    fn default() -> &'a Document {
        <Document as ::protobuf::Message>::default_instance()
    }
}

impl Document {
    pub fn new() -> Document {
        ::std::default::Default::default()
    }

    // string relative_path = 1;


    pub fn get_relative_path(&self) -> &str {
        &self.relative_path
    }
    pub fn clear_relative_path(&mut self) {
        self.relative_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_relative_path(&mut self, v: ::std::string::String) {
        self.relative_path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_relative_path(&mut self) -> &mut ::std::string::String {
        &mut self.relative_path
    }

    // Take field
    pub fn take_relative_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.relative_path, ::std::string::String::new())
    }

    // repeated .lib.codeintel.lsif_typed.Occurrence occurrences = 2;


    pub fn get_occurrences(&self) -> &[Occurrence] {
        &self.occurrences
    }
    pub fn clear_occurrences(&mut self) {
        self.occurrences.clear();
    }

    // Param is passed by value, moved
    pub fn set_occurrences(&mut self, v: ::protobuf::RepeatedField<Occurrence>) {
        self.occurrences = v;
    }

    // Mutable pointer to the field.
    pub fn mut_occurrences(&mut self) -> &mut ::protobuf::RepeatedField<Occurrence> {
        &mut self.occurrences
    }

    // Take field
    pub fn take_occurrences(&mut self) -> ::protobuf::RepeatedField<Occurrence> {
        ::std::mem::replace(&mut self.occurrences, ::protobuf::RepeatedField::new())
    }

    // repeated .lib.codeintel.lsif_typed.SymbolInformation symbols = 3;


    pub fn get_symbols(&self) -> &[SymbolInformation] {
        &self.symbols
    }
    pub fn clear_symbols(&mut self) {
        self.symbols.clear();
    }

    // Param is passed by value, moved
    pub fn set_symbols(&mut self, v: ::protobuf::RepeatedField<SymbolInformation>) {
        self.symbols = v;
    }

    // Mutable pointer to the field.
    pub fn mut_symbols(&mut self) -> &mut ::protobuf::RepeatedField<SymbolInformation> {
        &mut self.symbols
    }

    // Take field
    pub fn take_symbols(&mut self) -> ::protobuf::RepeatedField<SymbolInformation> {
        ::std::mem::replace(&mut self.symbols, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Document {
    fn is_initialized(&self) -> bool {
        for v in &self.occurrences {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.symbols {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.relative_path)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.occurrences)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.symbols)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.relative_path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.relative_path);
        }
        for value in &self.occurrences {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.symbols {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.relative_path.is_empty() {
            os.write_string(1, &self.relative_path)?;
        }
        for v in &self.occurrences {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.symbols {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Document {
        Document::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "relative_path",
                |m: &Document| { &m.relative_path },
                |m: &mut Document| { &mut m.relative_path },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Occurrence>>(
                "occurrences",
                |m: &Document| { &m.occurrences },
                |m: &mut Document| { &mut m.occurrences },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SymbolInformation>>(
                "symbols",
                |m: &Document| { &m.symbols },
                |m: &mut Document| { &mut m.symbols },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Document>(
                "Document",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Document {
        static instance: ::protobuf::rt::LazyV2<Document> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Document::new)
    }
}

impl ::protobuf::Clear for Document {
    fn clear(&mut self) {
        self.relative_path.clear();
        self.occurrences.clear();
        self.symbols.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Document {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Document {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Symbol {
    // message fields
    pub scheme: ::std::string::String,
    pub package: ::protobuf::SingularPtrField<Package>,
    pub descriptors: ::protobuf::RepeatedField<Descriptor>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Symbol {
    fn default() -> &'a Symbol {
        <Symbol as ::protobuf::Message>::default_instance()
    }
}

impl Symbol {
    pub fn new() -> Symbol {
        ::std::default::Default::default()
    }

    // string scheme = 1;


    pub fn get_scheme(&self) -> &str {
        &self.scheme
    }
    pub fn clear_scheme(&mut self) {
        self.scheme.clear();
    }

    // Param is passed by value, moved
    pub fn set_scheme(&mut self, v: ::std::string::String) {
        self.scheme = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_scheme(&mut self) -> &mut ::std::string::String {
        &mut self.scheme
    }

    // Take field
    pub fn take_scheme(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.scheme, ::std::string::String::new())
    }

    // .lib.codeintel.lsif_typed.Package package = 2;


    pub fn get_package(&self) -> &Package {
        self.package.as_ref().unwrap_or_else(|| <Package as ::protobuf::Message>::default_instance())
    }
    pub fn clear_package(&mut self) {
        self.package.clear();
    }

    pub fn has_package(&self) -> bool {
        self.package.is_some()
    }

    // Param is passed by value, moved
    pub fn set_package(&mut self, v: Package) {
        self.package = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_package(&mut self) -> &mut Package {
        if self.package.is_none() {
            self.package.set_default();
        }
        self.package.as_mut().unwrap()
    }

    // Take field
    pub fn take_package(&mut self) -> Package {
        self.package.take().unwrap_or_else(|| Package::new())
    }

    // repeated .lib.codeintel.lsif_typed.Descriptor descriptors = 3;


    pub fn get_descriptors(&self) -> &[Descriptor] {
        &self.descriptors
    }
    pub fn clear_descriptors(&mut self) {
        self.descriptors.clear();
    }

    // Param is passed by value, moved
    pub fn set_descriptors(&mut self, v: ::protobuf::RepeatedField<Descriptor>) {
        self.descriptors = v;
    }

    // Mutable pointer to the field.
    pub fn mut_descriptors(&mut self) -> &mut ::protobuf::RepeatedField<Descriptor> {
        &mut self.descriptors
    }

    // Take field
    pub fn take_descriptors(&mut self) -> ::protobuf::RepeatedField<Descriptor> {
        ::std::mem::replace(&mut self.descriptors, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Symbol {
    fn is_initialized(&self) -> bool {
        for v in &self.package {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.descriptors {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.scheme)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.package)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.descriptors)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.scheme.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.scheme);
        }
        if let Some(ref v) = self.package.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.descriptors {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.scheme.is_empty() {
            os.write_string(1, &self.scheme)?;
        }
        if let Some(ref v) = self.package.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.descriptors {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Symbol {
        Symbol::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "scheme",
                |m: &Symbol| { &m.scheme },
                |m: &mut Symbol| { &mut m.scheme },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Package>>(
                "package",
                |m: &Symbol| { &m.package },
                |m: &mut Symbol| { &mut m.package },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Descriptor>>(
                "descriptors",
                |m: &Symbol| { &m.descriptors },
                |m: &mut Symbol| { &mut m.descriptors },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Symbol>(
                "Symbol",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Symbol {
        static instance: ::protobuf::rt::LazyV2<Symbol> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Symbol::new)
    }
}

impl ::protobuf::Clear for Symbol {
    fn clear(&mut self) {
        self.scheme.clear();
        self.package.clear();
        self.descriptors.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Symbol {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Symbol {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Package {
    // message fields
    pub manager: ::std::string::String,
    pub name: ::std::string::String,
    pub version: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Package {
    fn default() -> &'a Package {
        <Package as ::protobuf::Message>::default_instance()
    }
}

impl Package {
    pub fn new() -> Package {
        ::std::default::Default::default()
    }

    // string manager = 1;


    pub fn get_manager(&self) -> &str {
        &self.manager
    }
    pub fn clear_manager(&mut self) {
        self.manager.clear();
    }

    // Param is passed by value, moved
    pub fn set_manager(&mut self, v: ::std::string::String) {
        self.manager = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_manager(&mut self) -> &mut ::std::string::String {
        &mut self.manager
    }

    // Take field
    pub fn take_manager(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.manager, ::std::string::String::new())
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string version = 3;


    pub fn get_version(&self) -> &str {
        &self.version
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Package {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.manager)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.manager.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.manager);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.manager.is_empty() {
            os.write_string(1, &self.manager)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if !self.version.is_empty() {
            os.write_string(3, &self.version)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Package {
        Package::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "manager",
                |m: &Package| { &m.manager },
                |m: &mut Package| { &mut m.manager },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Package| { &m.name },
                |m: &mut Package| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "version",
                |m: &Package| { &m.version },
                |m: &mut Package| { &mut m.version },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Package>(
                "Package",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Package {
        static instance: ::protobuf::rt::LazyV2<Package> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Package::new)
    }
}

impl ::protobuf::Clear for Package {
    fn clear(&mut self) {
        self.manager.clear();
        self.name.clear();
        self.version.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Package {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Package {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Descriptor {
    // message fields
    pub name: ::std::string::String,
    pub disambiguator: ::std::string::String,
    pub suffix: Descriptor_Suffix,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Descriptor {
    fn default() -> &'a Descriptor {
        <Descriptor as ::protobuf::Message>::default_instance()
    }
}

impl Descriptor {
    pub fn new() -> Descriptor {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string disambiguator = 2;


    pub fn get_disambiguator(&self) -> &str {
        &self.disambiguator
    }
    pub fn clear_disambiguator(&mut self) {
        self.disambiguator.clear();
    }

    // Param is passed by value, moved
    pub fn set_disambiguator(&mut self, v: ::std::string::String) {
        self.disambiguator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_disambiguator(&mut self) -> &mut ::std::string::String {
        &mut self.disambiguator
    }

    // Take field
    pub fn take_disambiguator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.disambiguator, ::std::string::String::new())
    }

    // .lib.codeintel.lsif_typed.Descriptor.Suffix suffix = 3;


    pub fn get_suffix(&self) -> Descriptor_Suffix {
        self.suffix
    }
    pub fn clear_suffix(&mut self) {
        self.suffix = Descriptor_Suffix::UnspecifiedSuffix;
    }

    // Param is passed by value, moved
    pub fn set_suffix(&mut self, v: Descriptor_Suffix) {
        self.suffix = v;
    }
}

impl ::protobuf::Message for Descriptor {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.disambiguator)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.suffix, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.disambiguator.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.disambiguator);
        }
        if self.suffix != Descriptor_Suffix::UnspecifiedSuffix {
            my_size += ::protobuf::rt::enum_size(3, self.suffix);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.disambiguator.is_empty() {
            os.write_string(2, &self.disambiguator)?;
        }
        if self.suffix != Descriptor_Suffix::UnspecifiedSuffix {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.suffix))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Descriptor {
        Descriptor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Descriptor| { &m.name },
                |m: &mut Descriptor| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "disambiguator",
                |m: &Descriptor| { &m.disambiguator },
                |m: &mut Descriptor| { &mut m.disambiguator },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Descriptor_Suffix>>(
                "suffix",
                |m: &Descriptor| { &m.suffix },
                |m: &mut Descriptor| { &mut m.suffix },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Descriptor>(
                "Descriptor",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Descriptor {
        static instance: ::protobuf::rt::LazyV2<Descriptor> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Descriptor::new)
    }
}

impl ::protobuf::Clear for Descriptor {
    fn clear(&mut self) {
        self.name.clear();
        self.disambiguator.clear();
        self.suffix = Descriptor_Suffix::UnspecifiedSuffix;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Descriptor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Descriptor {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Descriptor_Suffix {
    UnspecifiedSuffix = 0,
    Package = 1,
    Type = 2,
    Term = 3,
    Method = 4,
    TypeParameter = 5,
    Parameter = 6,
    Meta = 7,
}

impl ::protobuf::ProtobufEnum for Descriptor_Suffix {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Descriptor_Suffix> {
        match value {
            0 => ::std::option::Option::Some(Descriptor_Suffix::UnspecifiedSuffix),
            1 => ::std::option::Option::Some(Descriptor_Suffix::Package),
            2 => ::std::option::Option::Some(Descriptor_Suffix::Type),
            3 => ::std::option::Option::Some(Descriptor_Suffix::Term),
            4 => ::std::option::Option::Some(Descriptor_Suffix::Method),
            5 => ::std::option::Option::Some(Descriptor_Suffix::TypeParameter),
            6 => ::std::option::Option::Some(Descriptor_Suffix::Parameter),
            7 => ::std::option::Option::Some(Descriptor_Suffix::Meta),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Descriptor_Suffix] = &[
            Descriptor_Suffix::UnspecifiedSuffix,
            Descriptor_Suffix::Package,
            Descriptor_Suffix::Type,
            Descriptor_Suffix::Term,
            Descriptor_Suffix::Method,
            Descriptor_Suffix::TypeParameter,
            Descriptor_Suffix::Parameter,
            Descriptor_Suffix::Meta,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Descriptor_Suffix>("Descriptor.Suffix", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Descriptor_Suffix {
}

impl ::std::default::Default for Descriptor_Suffix {
    fn default() -> Self {
        Descriptor_Suffix::UnspecifiedSuffix
    }
}

impl ::protobuf::reflect::ProtobufValue for Descriptor_Suffix {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SymbolInformation {
    // message fields
    pub symbol: ::std::string::String,
    pub documentation: ::protobuf::RepeatedField<::std::string::String>,
    pub relationships: ::protobuf::RepeatedField<Relationship>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SymbolInformation {
    fn default() -> &'a SymbolInformation {
        <SymbolInformation as ::protobuf::Message>::default_instance()
    }
}

impl SymbolInformation {
    pub fn new() -> SymbolInformation {
        ::std::default::Default::default()
    }

    // string symbol = 1;


    pub fn get_symbol(&self) -> &str {
        &self.symbol
    }
    pub fn clear_symbol(&mut self) {
        self.symbol.clear();
    }

    // Param is passed by value, moved
    pub fn set_symbol(&mut self, v: ::std::string::String) {
        self.symbol = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_symbol(&mut self) -> &mut ::std::string::String {
        &mut self.symbol
    }

    // Take field
    pub fn take_symbol(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.symbol, ::std::string::String::new())
    }

    // repeated string documentation = 3;


    pub fn get_documentation(&self) -> &[::std::string::String] {
        &self.documentation
    }
    pub fn clear_documentation(&mut self) {
        self.documentation.clear();
    }

    // Param is passed by value, moved
    pub fn set_documentation(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.documentation = v;
    }

    // Mutable pointer to the field.
    pub fn mut_documentation(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.documentation
    }

    // Take field
    pub fn take_documentation(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.documentation, ::protobuf::RepeatedField::new())
    }

    // repeated .lib.codeintel.lsif_typed.Relationship relationships = 4;


    pub fn get_relationships(&self) -> &[Relationship] {
        &self.relationships
    }
    pub fn clear_relationships(&mut self) {
        self.relationships.clear();
    }

    // Param is passed by value, moved
    pub fn set_relationships(&mut self, v: ::protobuf::RepeatedField<Relationship>) {
        self.relationships = v;
    }

    // Mutable pointer to the field.
    pub fn mut_relationships(&mut self) -> &mut ::protobuf::RepeatedField<Relationship> {
        &mut self.relationships
    }

    // Take field
    pub fn take_relationships(&mut self) -> ::protobuf::RepeatedField<Relationship> {
        ::std::mem::replace(&mut self.relationships, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SymbolInformation {
    fn is_initialized(&self) -> bool {
        for v in &self.relationships {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.symbol)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.documentation)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.relationships)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.symbol.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.symbol);
        }
        for value in &self.documentation {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        for value in &self.relationships {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.symbol.is_empty() {
            os.write_string(1, &self.symbol)?;
        }
        for v in &self.documentation {
            os.write_string(3, &v)?;
        };
        for v in &self.relationships {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SymbolInformation {
        SymbolInformation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "symbol",
                |m: &SymbolInformation| { &m.symbol },
                |m: &mut SymbolInformation| { &mut m.symbol },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "documentation",
                |m: &SymbolInformation| { &m.documentation },
                |m: &mut SymbolInformation| { &mut m.documentation },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Relationship>>(
                "relationships",
                |m: &SymbolInformation| { &m.relationships },
                |m: &mut SymbolInformation| { &mut m.relationships },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SymbolInformation>(
                "SymbolInformation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SymbolInformation {
        static instance: ::protobuf::rt::LazyV2<SymbolInformation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SymbolInformation::new)
    }
}

impl ::protobuf::Clear for SymbolInformation {
    fn clear(&mut self) {
        self.symbol.clear();
        self.documentation.clear();
        self.relationships.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SymbolInformation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SymbolInformation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Relationship {
    // message fields
    pub symbol: ::std::string::String,
    pub is_reference: bool,
    pub is_implementation: bool,
    pub is_type_definition: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Relationship {
    fn default() -> &'a Relationship {
        <Relationship as ::protobuf::Message>::default_instance()
    }
}

impl Relationship {
    pub fn new() -> Relationship {
        ::std::default::Default::default()
    }

    // string symbol = 1;


    pub fn get_symbol(&self) -> &str {
        &self.symbol
    }
    pub fn clear_symbol(&mut self) {
        self.symbol.clear();
    }

    // Param is passed by value, moved
    pub fn set_symbol(&mut self, v: ::std::string::String) {
        self.symbol = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_symbol(&mut self) -> &mut ::std::string::String {
        &mut self.symbol
    }

    // Take field
    pub fn take_symbol(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.symbol, ::std::string::String::new())
    }

    // bool is_reference = 2;


    pub fn get_is_reference(&self) -> bool {
        self.is_reference
    }
    pub fn clear_is_reference(&mut self) {
        self.is_reference = false;
    }

    // Param is passed by value, moved
    pub fn set_is_reference(&mut self, v: bool) {
        self.is_reference = v;
    }

    // bool is_implementation = 3;


    pub fn get_is_implementation(&self) -> bool {
        self.is_implementation
    }
    pub fn clear_is_implementation(&mut self) {
        self.is_implementation = false;
    }

    // Param is passed by value, moved
    pub fn set_is_implementation(&mut self, v: bool) {
        self.is_implementation = v;
    }

    // bool is_type_definition = 4;


    pub fn get_is_type_definition(&self) -> bool {
        self.is_type_definition
    }
    pub fn clear_is_type_definition(&mut self) {
        self.is_type_definition = false;
    }

    // Param is passed by value, moved
    pub fn set_is_type_definition(&mut self, v: bool) {
        self.is_type_definition = v;
    }
}

impl ::protobuf::Message for Relationship {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.symbol)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_reference = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_implementation = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_type_definition = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.symbol.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.symbol);
        }
        if self.is_reference != false {
            my_size += 2;
        }
        if self.is_implementation != false {
            my_size += 2;
        }
        if self.is_type_definition != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.symbol.is_empty() {
            os.write_string(1, &self.symbol)?;
        }
        if self.is_reference != false {
            os.write_bool(2, self.is_reference)?;
        }
        if self.is_implementation != false {
            os.write_bool(3, self.is_implementation)?;
        }
        if self.is_type_definition != false {
            os.write_bool(4, self.is_type_definition)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Relationship {
        Relationship::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "symbol",
                |m: &Relationship| { &m.symbol },
                |m: &mut Relationship| { &mut m.symbol },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "is_reference",
                |m: &Relationship| { &m.is_reference },
                |m: &mut Relationship| { &mut m.is_reference },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "is_implementation",
                |m: &Relationship| { &m.is_implementation },
                |m: &mut Relationship| { &mut m.is_implementation },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "is_type_definition",
                |m: &Relationship| { &m.is_type_definition },
                |m: &mut Relationship| { &mut m.is_type_definition },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Relationship>(
                "Relationship",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Relationship {
        static instance: ::protobuf::rt::LazyV2<Relationship> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Relationship::new)
    }
}

impl ::protobuf::Clear for Relationship {
    fn clear(&mut self) {
        self.symbol.clear();
        self.is_reference = false;
        self.is_implementation = false;
        self.is_type_definition = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Relationship {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Relationship {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Occurrence {
    // message fields
    pub range: ::std::vec::Vec<i32>,
    pub symbol: ::std::string::String,
    pub symbol_roles: i32,
    pub override_documentation: ::protobuf::RepeatedField<::std::string::String>,
    pub syntax_kind: SyntaxKind,
    pub diagnostics: ::protobuf::RepeatedField<Diagnostic>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Occurrence {
    fn default() -> &'a Occurrence {
        <Occurrence as ::protobuf::Message>::default_instance()
    }
}

impl Occurrence {
    pub fn new() -> Occurrence {
        ::std::default::Default::default()
    }

    // repeated int32 range = 1;


    pub fn get_range(&self) -> &[i32] {
        &self.range
    }
    pub fn clear_range(&mut self) {
        self.range.clear();
    }

    // Param is passed by value, moved
    pub fn set_range(&mut self, v: ::std::vec::Vec<i32>) {
        self.range = v;
    }

    // Mutable pointer to the field.
    pub fn mut_range(&mut self) -> &mut ::std::vec::Vec<i32> {
        &mut self.range
    }

    // Take field
    pub fn take_range(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.range, ::std::vec::Vec::new())
    }

    // string symbol = 2;


    pub fn get_symbol(&self) -> &str {
        &self.symbol
    }
    pub fn clear_symbol(&mut self) {
        self.symbol.clear();
    }

    // Param is passed by value, moved
    pub fn set_symbol(&mut self, v: ::std::string::String) {
        self.symbol = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_symbol(&mut self) -> &mut ::std::string::String {
        &mut self.symbol
    }

    // Take field
    pub fn take_symbol(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.symbol, ::std::string::String::new())
    }

    // int32 symbol_roles = 3;


    pub fn get_symbol_roles(&self) -> i32 {
        self.symbol_roles
    }
    pub fn clear_symbol_roles(&mut self) {
        self.symbol_roles = 0;
    }

    // Param is passed by value, moved
    pub fn set_symbol_roles(&mut self, v: i32) {
        self.symbol_roles = v;
    }

    // repeated string override_documentation = 4;


    pub fn get_override_documentation(&self) -> &[::std::string::String] {
        &self.override_documentation
    }
    pub fn clear_override_documentation(&mut self) {
        self.override_documentation.clear();
    }

    // Param is passed by value, moved
    pub fn set_override_documentation(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.override_documentation = v;
    }

    // Mutable pointer to the field.
    pub fn mut_override_documentation(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.override_documentation
    }

    // Take field
    pub fn take_override_documentation(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.override_documentation, ::protobuf::RepeatedField::new())
    }

    // .lib.codeintel.lsif_typed.SyntaxKind syntax_kind = 5;


    pub fn get_syntax_kind(&self) -> SyntaxKind {
        self.syntax_kind
    }
    pub fn clear_syntax_kind(&mut self) {
        self.syntax_kind = SyntaxKind::UnspecifiedSyntaxKind;
    }

    // Param is passed by value, moved
    pub fn set_syntax_kind(&mut self, v: SyntaxKind) {
        self.syntax_kind = v;
    }

    // repeated .lib.codeintel.lsif_typed.Diagnostic diagnostics = 6;


    pub fn get_diagnostics(&self) -> &[Diagnostic] {
        &self.diagnostics
    }
    pub fn clear_diagnostics(&mut self) {
        self.diagnostics.clear();
    }

    // Param is passed by value, moved
    pub fn set_diagnostics(&mut self, v: ::protobuf::RepeatedField<Diagnostic>) {
        self.diagnostics = v;
    }

    // Mutable pointer to the field.
    pub fn mut_diagnostics(&mut self) -> &mut ::protobuf::RepeatedField<Diagnostic> {
        &mut self.diagnostics
    }

    // Take field
    pub fn take_diagnostics(&mut self) -> ::protobuf::RepeatedField<Diagnostic> {
        ::std::mem::replace(&mut self.diagnostics, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Occurrence {
    fn is_initialized(&self) -> bool {
        for v in &self.diagnostics {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_int32_into(wire_type, is, &mut self.range)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.symbol)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.symbol_roles = tmp;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.override_documentation)?;
                },
                5 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.syntax_kind, 5, &mut self.unknown_fields)?
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.diagnostics)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.range {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if !self.symbol.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.symbol);
        }
        if self.symbol_roles != 0 {
            my_size += ::protobuf::rt::value_size(3, self.symbol_roles, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.override_documentation {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        if self.syntax_kind != SyntaxKind::UnspecifiedSyntaxKind {
            my_size += ::protobuf::rt::enum_size(5, self.syntax_kind);
        }
        for value in &self.diagnostics {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.range {
            os.write_int32(1, *v)?;
        };
        if !self.symbol.is_empty() {
            os.write_string(2, &self.symbol)?;
        }
        if self.symbol_roles != 0 {
            os.write_int32(3, self.symbol_roles)?;
        }
        for v in &self.override_documentation {
            os.write_string(4, &v)?;
        };
        if self.syntax_kind != SyntaxKind::UnspecifiedSyntaxKind {
            os.write_enum(5, ::protobuf::ProtobufEnum::value(&self.syntax_kind))?;
        }
        for v in &self.diagnostics {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Occurrence {
        Occurrence::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "range",
                |m: &Occurrence| { &m.range },
                |m: &mut Occurrence| { &mut m.range },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "symbol",
                |m: &Occurrence| { &m.symbol },
                |m: &mut Occurrence| { &mut m.symbol },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "symbol_roles",
                |m: &Occurrence| { &m.symbol_roles },
                |m: &mut Occurrence| { &mut m.symbol_roles },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "override_documentation",
                |m: &Occurrence| { &m.override_documentation },
                |m: &mut Occurrence| { &mut m.override_documentation },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<SyntaxKind>>(
                "syntax_kind",
                |m: &Occurrence| { &m.syntax_kind },
                |m: &mut Occurrence| { &mut m.syntax_kind },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Diagnostic>>(
                "diagnostics",
                |m: &Occurrence| { &m.diagnostics },
                |m: &mut Occurrence| { &mut m.diagnostics },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Occurrence>(
                "Occurrence",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Occurrence {
        static instance: ::protobuf::rt::LazyV2<Occurrence> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Occurrence::new)
    }
}

impl ::protobuf::Clear for Occurrence {
    fn clear(&mut self) {
        self.range.clear();
        self.symbol.clear();
        self.symbol_roles = 0;
        self.override_documentation.clear();
        self.syntax_kind = SyntaxKind::UnspecifiedSyntaxKind;
        self.diagnostics.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Occurrence {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Occurrence {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Diagnostic {
    // message fields
    pub severity: Severity,
    pub code: ::std::string::String,
    pub message: ::std::string::String,
    pub source: ::std::string::String,
    pub tags: ::std::vec::Vec<DiagnosticTag>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Diagnostic {
    fn default() -> &'a Diagnostic {
        <Diagnostic as ::protobuf::Message>::default_instance()
    }
}

impl Diagnostic {
    pub fn new() -> Diagnostic {
        ::std::default::Default::default()
    }

    // .lib.codeintel.lsif_typed.Severity severity = 1;


    pub fn get_severity(&self) -> Severity {
        self.severity
    }
    pub fn clear_severity(&mut self) {
        self.severity = Severity::UnspecifiedSeverity;
    }

    // Param is passed by value, moved
    pub fn set_severity(&mut self, v: Severity) {
        self.severity = v;
    }

    // string code = 2;


    pub fn get_code(&self) -> &str {
        &self.code
    }
    pub fn clear_code(&mut self) {
        self.code.clear();
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: ::std::string::String) {
        self.code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_code(&mut self) -> &mut ::std::string::String {
        &mut self.code
    }

    // Take field
    pub fn take_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.code, ::std::string::String::new())
    }

    // string message = 3;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }

    // string source = 4;


    pub fn get_source(&self) -> &str {
        &self.source
    }
    pub fn clear_source(&mut self) {
        self.source.clear();
    }

    // Param is passed by value, moved
    pub fn set_source(&mut self, v: ::std::string::String) {
        self.source = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source(&mut self) -> &mut ::std::string::String {
        &mut self.source
    }

    // Take field
    pub fn take_source(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.source, ::std::string::String::new())
    }

    // repeated .lib.codeintel.lsif_typed.DiagnosticTag tags = 5;


    pub fn get_tags(&self) -> &[DiagnosticTag] {
        &self.tags
    }
    pub fn clear_tags(&mut self) {
        self.tags.clear();
    }

    // Param is passed by value, moved
    pub fn set_tags(&mut self, v: ::std::vec::Vec<DiagnosticTag>) {
        self.tags = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tags(&mut self) -> &mut ::std::vec::Vec<DiagnosticTag> {
        &mut self.tags
    }

    // Take field
    pub fn take_tags(&mut self) -> ::std::vec::Vec<DiagnosticTag> {
        ::std::mem::replace(&mut self.tags, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Diagnostic {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.severity, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.code)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.source)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_enum_with_unknown_fields_into(wire_type, is, &mut self.tags, 5, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.severity != Severity::UnspecifiedSeverity {
            my_size += ::protobuf::rt::enum_size(1, self.severity);
        }
        if !self.code.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.code);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.message);
        }
        if !self.source.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.source);
        }
        for value in &self.tags {
            my_size += ::protobuf::rt::enum_size(5, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.severity != Severity::UnspecifiedSeverity {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.severity))?;
        }
        if !self.code.is_empty() {
            os.write_string(2, &self.code)?;
        }
        if !self.message.is_empty() {
            os.write_string(3, &self.message)?;
        }
        if !self.source.is_empty() {
            os.write_string(4, &self.source)?;
        }
        for v in &self.tags {
            os.write_enum(5, ::protobuf::ProtobufEnum::value(v))?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Diagnostic {
        Diagnostic::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Severity>>(
                "severity",
                |m: &Diagnostic| { &m.severity },
                |m: &mut Diagnostic| { &mut m.severity },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "code",
                |m: &Diagnostic| { &m.code },
                |m: &mut Diagnostic| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &Diagnostic| { &m.message },
                |m: &mut Diagnostic| { &mut m.message },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "source",
                |m: &Diagnostic| { &m.source },
                |m: &mut Diagnostic| { &mut m.source },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeEnum<DiagnosticTag>>(
                "tags",
                |m: &Diagnostic| { &m.tags },
                |m: &mut Diagnostic| { &mut m.tags },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Diagnostic>(
                "Diagnostic",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Diagnostic {
        static instance: ::protobuf::rt::LazyV2<Diagnostic> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Diagnostic::new)
    }
}

impl ::protobuf::Clear for Diagnostic {
    fn clear(&mut self) {
        self.severity = Severity::UnspecifiedSeverity;
        self.code.clear();
        self.message.clear();
        self.source.clear();
        self.tags.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Diagnostic {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Diagnostic {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ProtocolVersion {
    UnspecifiedProtocolVersion = 0,
}

impl ::protobuf::ProtobufEnum for ProtocolVersion {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ProtocolVersion> {
        match value {
            0 => ::std::option::Option::Some(ProtocolVersion::UnspecifiedProtocolVersion),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ProtocolVersion] = &[
            ProtocolVersion::UnspecifiedProtocolVersion,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ProtocolVersion>("ProtocolVersion", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ProtocolVersion {
}

impl ::std::default::Default for ProtocolVersion {
    fn default() -> Self {
        ProtocolVersion::UnspecifiedProtocolVersion
    }
}

impl ::protobuf::reflect::ProtobufValue for ProtocolVersion {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TextEncoding {
    UnspecifiedTextEncoding = 0,
    UTF8 = 1,
    UTF16 = 2,
}

impl ::protobuf::ProtobufEnum for TextEncoding {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TextEncoding> {
        match value {
            0 => ::std::option::Option::Some(TextEncoding::UnspecifiedTextEncoding),
            1 => ::std::option::Option::Some(TextEncoding::UTF8),
            2 => ::std::option::Option::Some(TextEncoding::UTF16),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TextEncoding] = &[
            TextEncoding::UnspecifiedTextEncoding,
            TextEncoding::UTF8,
            TextEncoding::UTF16,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<TextEncoding>("TextEncoding", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for TextEncoding {
}

impl ::std::default::Default for TextEncoding {
    fn default() -> Self {
        TextEncoding::UnspecifiedTextEncoding
    }
}

impl ::protobuf::reflect::ProtobufValue for TextEncoding {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum SymbolRole {
    UnspecifiedSymbolRole = 0,
    Definition = 1,
    Import = 2,
    WriteAccess = 4,
    ReadAccess = 8,
    Generated = 16,
    Test = 32,
}

impl ::protobuf::ProtobufEnum for SymbolRole {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SymbolRole> {
        match value {
            0 => ::std::option::Option::Some(SymbolRole::UnspecifiedSymbolRole),
            1 => ::std::option::Option::Some(SymbolRole::Definition),
            2 => ::std::option::Option::Some(SymbolRole::Import),
            4 => ::std::option::Option::Some(SymbolRole::WriteAccess),
            8 => ::std::option::Option::Some(SymbolRole::ReadAccess),
            16 => ::std::option::Option::Some(SymbolRole::Generated),
            32 => ::std::option::Option::Some(SymbolRole::Test),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [SymbolRole] = &[
            SymbolRole::UnspecifiedSymbolRole,
            SymbolRole::Definition,
            SymbolRole::Import,
            SymbolRole::WriteAccess,
            SymbolRole::ReadAccess,
            SymbolRole::Generated,
            SymbolRole::Test,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<SymbolRole>("SymbolRole", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for SymbolRole {
}

impl ::std::default::Default for SymbolRole {
    fn default() -> Self {
        SymbolRole::UnspecifiedSymbolRole
    }
}

impl ::protobuf::reflect::ProtobufValue for SymbolRole {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum SyntaxKind {
    UnspecifiedSyntaxKind = 0,
    Operator = 1,
    Comment = 2,
    PunctuationDelimiter = 3,
    PunctuationBracket = 4,
    PunctuationSpecial = 5,
    Keyword = 6,
    Identifier = 7,
    BuiltinIdentifier = 8,
    NullIdentifier = 9,
    ConstantIdentifier = 10,
    MutableGlobalIdentifier = 11,
    ParameterIdentifier = 12,
    LocalIdentifier = 13,
    ShadowedIdentifier = 14,
    ModuleIdentifier = 15,
    MacroIdentifier = 16,
    StringLiteral = 17,
    StringLiteralRegex = 18,
    StringLiteralEscape = 19,
    StringLiteralSpecial = 20,
    StringLiteralKey = 21,
    CharacterLiteral = 22,
    NumericLiteral = 23,
    BooleanLiteral = 24,
    FunctionDefinition = 25,
    MacroDefinition = 26,
    TypeIdentifier = 27,
    BuiltinTypeIdentifier = 28,
    AttributeIdentifier = 29,
    Tag = 30,
    TagAttribute = 31,
    TagDelimiter = 32,
}

impl ::protobuf::ProtobufEnum for SyntaxKind {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SyntaxKind> {
        match value {
            0 => ::std::option::Option::Some(SyntaxKind::UnspecifiedSyntaxKind),
            1 => ::std::option::Option::Some(SyntaxKind::Operator),
            2 => ::std::option::Option::Some(SyntaxKind::Comment),
            3 => ::std::option::Option::Some(SyntaxKind::PunctuationDelimiter),
            4 => ::std::option::Option::Some(SyntaxKind::PunctuationBracket),
            5 => ::std::option::Option::Some(SyntaxKind::PunctuationSpecial),
            6 => ::std::option::Option::Some(SyntaxKind::Keyword),
            7 => ::std::option::Option::Some(SyntaxKind::Identifier),
            8 => ::std::option::Option::Some(SyntaxKind::BuiltinIdentifier),
            9 => ::std::option::Option::Some(SyntaxKind::NullIdentifier),
            10 => ::std::option::Option::Some(SyntaxKind::ConstantIdentifier),
            11 => ::std::option::Option::Some(SyntaxKind::MutableGlobalIdentifier),
            12 => ::std::option::Option::Some(SyntaxKind::ParameterIdentifier),
            13 => ::std::option::Option::Some(SyntaxKind::LocalIdentifier),
            14 => ::std::option::Option::Some(SyntaxKind::ShadowedIdentifier),
            15 => ::std::option::Option::Some(SyntaxKind::ModuleIdentifier),
            16 => ::std::option::Option::Some(SyntaxKind::MacroIdentifier),
            17 => ::std::option::Option::Some(SyntaxKind::StringLiteral),
            18 => ::std::option::Option::Some(SyntaxKind::StringLiteralRegex),
            19 => ::std::option::Option::Some(SyntaxKind::StringLiteralEscape),
            20 => ::std::option::Option::Some(SyntaxKind::StringLiteralSpecial),
            21 => ::std::option::Option::Some(SyntaxKind::StringLiteralKey),
            22 => ::std::option::Option::Some(SyntaxKind::CharacterLiteral),
            23 => ::std::option::Option::Some(SyntaxKind::NumericLiteral),
            24 => ::std::option::Option::Some(SyntaxKind::BooleanLiteral),
            25 => ::std::option::Option::Some(SyntaxKind::FunctionDefinition),
            26 => ::std::option::Option::Some(SyntaxKind::MacroDefinition),
            27 => ::std::option::Option::Some(SyntaxKind::TypeIdentifier),
            28 => ::std::option::Option::Some(SyntaxKind::BuiltinTypeIdentifier),
            29 => ::std::option::Option::Some(SyntaxKind::AttributeIdentifier),
            30 => ::std::option::Option::Some(SyntaxKind::Tag),
            31 => ::std::option::Option::Some(SyntaxKind::TagAttribute),
            32 => ::std::option::Option::Some(SyntaxKind::TagDelimiter),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [SyntaxKind] = &[
            SyntaxKind::UnspecifiedSyntaxKind,
            SyntaxKind::Operator,
            SyntaxKind::Comment,
            SyntaxKind::PunctuationDelimiter,
            SyntaxKind::PunctuationBracket,
            SyntaxKind::PunctuationSpecial,
            SyntaxKind::Keyword,
            SyntaxKind::Identifier,
            SyntaxKind::BuiltinIdentifier,
            SyntaxKind::NullIdentifier,
            SyntaxKind::ConstantIdentifier,
            SyntaxKind::MutableGlobalIdentifier,
            SyntaxKind::ParameterIdentifier,
            SyntaxKind::LocalIdentifier,
            SyntaxKind::ShadowedIdentifier,
            SyntaxKind::ModuleIdentifier,
            SyntaxKind::MacroIdentifier,
            SyntaxKind::StringLiteral,
            SyntaxKind::StringLiteralRegex,
            SyntaxKind::StringLiteralEscape,
            SyntaxKind::StringLiteralSpecial,
            SyntaxKind::StringLiteralKey,
            SyntaxKind::CharacterLiteral,
            SyntaxKind::NumericLiteral,
            SyntaxKind::BooleanLiteral,
            SyntaxKind::FunctionDefinition,
            SyntaxKind::MacroDefinition,
            SyntaxKind::TypeIdentifier,
            SyntaxKind::BuiltinTypeIdentifier,
            SyntaxKind::AttributeIdentifier,
            SyntaxKind::Tag,
            SyntaxKind::TagAttribute,
            SyntaxKind::TagDelimiter,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<SyntaxKind>("SyntaxKind", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for SyntaxKind {
}

impl ::std::default::Default for SyntaxKind {
    fn default() -> Self {
        SyntaxKind::UnspecifiedSyntaxKind
    }
}

impl ::protobuf::reflect::ProtobufValue for SyntaxKind {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Severity {
    UnspecifiedSeverity = 0,
    Error = 1,
    Warning = 2,
    Information = 3,
    Hint = 4,
}

impl ::protobuf::ProtobufEnum for Severity {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Severity> {
        match value {
            0 => ::std::option::Option::Some(Severity::UnspecifiedSeverity),
            1 => ::std::option::Option::Some(Severity::Error),
            2 => ::std::option::Option::Some(Severity::Warning),
            3 => ::std::option::Option::Some(Severity::Information),
            4 => ::std::option::Option::Some(Severity::Hint),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Severity] = &[
            Severity::UnspecifiedSeverity,
            Severity::Error,
            Severity::Warning,
            Severity::Information,
            Severity::Hint,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Severity>("Severity", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Severity {
}

impl ::std::default::Default for Severity {
    fn default() -> Self {
        Severity::UnspecifiedSeverity
    }
}

impl ::protobuf::reflect::ProtobufValue for Severity {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum DiagnosticTag {
    UnspecifiedDiagnosticTag = 0,
    Unnecessary = 1,
    Deprecated = 2,
}

impl ::protobuf::ProtobufEnum for DiagnosticTag {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<DiagnosticTag> {
        match value {
            0 => ::std::option::Option::Some(DiagnosticTag::UnspecifiedDiagnosticTag),
            1 => ::std::option::Option::Some(DiagnosticTag::Unnecessary),
            2 => ::std::option::Option::Some(DiagnosticTag::Deprecated),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [DiagnosticTag] = &[
            DiagnosticTag::UnspecifiedDiagnosticTag,
            DiagnosticTag::Unnecessary,
            DiagnosticTag::Deprecated,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<DiagnosticTag>("DiagnosticTag", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for DiagnosticTag {
}

impl ::std::default::Default for DiagnosticTag {
    fn default() -> Self {
        DiagnosticTag::UnspecifiedDiagnosticTag
    }
}

impl ::protobuf::reflect::ProtobufValue for DiagnosticTag {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n#lib/codeintel/lsif_typed/lsif.proto\x12\x18lib.codeintel.lsif_typed\"\
    \xe1\x01\n\x05Index\x12>\n\x08metadata\x18\x01\x20\x01(\x0b2\".lib.codei\
    ntel.lsif_typed.MetadataR\x08metadata\x12@\n\tdocuments\x18\x02\x20\x03(\
    \x0b2\".lib.codeintel.lsif_typed.DocumentR\tdocuments\x12V\n\x10external\
    _symbols\x18\x03\x20\x03(\x0b2+.lib.codeintel.lsif_typed.SymbolInformati\
    onR\x0fexternalSymbols\"\x91\x02\n\x08Metadata\x12C\n\x07version\x18\x01\
    \x20\x01(\x0e2).lib.codeintel.lsif_typed.ProtocolVersionR\x07version\x12\
    ?\n\ttool_info\x18\x02\x20\x01(\x0b2\".lib.codeintel.lsif_typed.ToolInfo\
    R\x08toolInfo\x12!\n\x0cproject_root\x18\x03\x20\x01(\tR\x0bprojectRoot\
    \x12\\\n\x16text_document_encoding\x18\x04\x20\x01(\x0e2&.lib.codeintel.\
    lsif_typed.TextEncodingR\x14textDocumentEncoding\"V\n\x08ToolInfo\x12\
    \x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x18\n\x07version\x18\x02\
    \x20\x01(\tR\x07version\x12\x1c\n\targuments\x18\x03\x20\x03(\tR\targume\
    nts\"\xbe\x01\n\x08Document\x12#\n\rrelative_path\x18\x01\x20\x01(\tR\
    \x0crelativePath\x12F\n\x0boccurrences\x18\x02\x20\x03(\x0b2$.lib.codein\
    tel.lsif_typed.OccurrenceR\x0boccurrences\x12E\n\x07symbols\x18\x03\x20\
    \x03(\x0b2+.lib.codeintel.lsif_typed.SymbolInformationR\x07symbols\"\xa5\
    \x01\n\x06Symbol\x12\x16\n\x06scheme\x18\x01\x20\x01(\tR\x06scheme\x12;\
    \n\x07package\x18\x02\x20\x01(\x0b2!.lib.codeintel.lsif_typed.PackageR\
    \x07package\x12F\n\x0bdescriptors\x18\x03\x20\x03(\x0b2$.lib.codeintel.l\
    sif_typed.DescriptorR\x0bdescriptors\"Q\n\x07Package\x12\x18\n\x07manage\
    r\x18\x01\x20\x01(\tR\x07manager\x12\x12\n\x04name\x18\x02\x20\x01(\tR\
    \x04name\x12\x18\n\x07version\x18\x03\x20\x01(\tR\x07version\"\x85\x02\n\
    \nDescriptor\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12$\n\rdisam\
    biguator\x18\x02\x20\x01(\tR\rdisambiguator\x12C\n\x06suffix\x18\x03\x20\
    \x01(\x0e2+.lib.codeintel.lsif_typed.Descriptor.SuffixR\x06suffix\"x\n\
    \x06Suffix\x12\x15\n\x11UnspecifiedSuffix\x10\0\x12\x0b\n\x07Package\x10\
    \x01\x12\x08\n\x04Type\x10\x02\x12\x08\n\x04Term\x10\x03\x12\n\n\x06Meth\
    od\x10\x04\x12\x11\n\rTypeParameter\x10\x05\x12\r\n\tParameter\x10\x06\
    \x12\x08\n\x04Meta\x10\x07\"\x9f\x01\n\x11SymbolInformation\x12\x16\n\
    \x06symbol\x18\x01\x20\x01(\tR\x06symbol\x12$\n\rdocumentation\x18\x03\
    \x20\x03(\tR\rdocumentation\x12L\n\rrelationships\x18\x04\x20\x03(\x0b2&\
    .lib.codeintel.lsif_typed.RelationshipR\rrelationships\"\xa4\x01\n\x0cRe\
    lationship\x12\x16\n\x06symbol\x18\x01\x20\x01(\tR\x06symbol\x12!\n\x0ci\
    s_reference\x18\x02\x20\x01(\x08R\x0bisReference\x12+\n\x11is_implementa\
    tion\x18\x03\x20\x01(\x08R\x10isImplementation\x12,\n\x12is_type_definit\
    ion\x18\x04\x20\x01(\x08R\x10isTypeDefinition\"\xa3\x02\n\nOccurrence\
    \x12\x14\n\x05range\x18\x01\x20\x03(\x05R\x05range\x12\x16\n\x06symbol\
    \x18\x02\x20\x01(\tR\x06symbol\x12!\n\x0csymbol_roles\x18\x03\x20\x01(\
    \x05R\x0bsymbolRoles\x125\n\x16override_documentation\x18\x04\x20\x03(\t\
    R\x15overrideDocumentation\x12E\n\x0bsyntax_kind\x18\x05\x20\x01(\x0e2$.\
    lib.codeintel.lsif_typed.SyntaxKindR\nsyntaxKind\x12F\n\x0bdiagnostics\
    \x18\x06\x20\x03(\x0b2$.lib.codeintel.lsif_typed.DiagnosticR\x0bdiagnost\
    ics\"\xcf\x01\n\nDiagnostic\x12>\n\x08severity\x18\x01\x20\x01(\x0e2\".l\
    ib.codeintel.lsif_typed.SeverityR\x08severity\x12\x12\n\x04code\x18\x02\
    \x20\x01(\tR\x04code\x12\x18\n\x07message\x18\x03\x20\x01(\tR\x07message\
    \x12\x16\n\x06source\x18\x04\x20\x01(\tR\x06source\x12;\n\x04tags\x18\
    \x05\x20\x03(\x0e2'.lib.codeintel.lsif_typed.DiagnosticTagR\x04tags*1\n\
    \x0fProtocolVersion\x12\x1e\n\x1aUnspecifiedProtocolVersion\x10\0*@\n\
    \x0cTextEncoding\x12\x1b\n\x17UnspecifiedTextEncoding\x10\0\x12\x08\n\
    \x04UTF8\x10\x01\x12\t\n\x05UTF16\x10\x02*}\n\nSymbolRole\x12\x19\n\x15U\
    nspecifiedSymbolRole\x10\0\x12\x0e\n\nDefinition\x10\x01\x12\n\n\x06Impo\
    rt\x10\x02\x12\x0f\n\x0bWriteAccess\x10\x04\x12\x0e\n\nReadAccess\x10\
    \x08\x12\r\n\tGenerated\x10\x10\x12\x08\n\x04Test\x10\x20*\xce\x05\n\nSy\
    ntaxKind\x12\x19\n\x15UnspecifiedSyntaxKind\x10\0\x12\x0c\n\x08Operator\
    \x10\x01\x12\x0b\n\x07Comment\x10\x02\x12\x18\n\x14PunctuationDelimiter\
    \x10\x03\x12\x16\n\x12PunctuationBracket\x10\x04\x12\x16\n\x12Punctuatio\
    nSpecial\x10\x05\x12\x0b\n\x07Keyword\x10\x06\x12\x0e\n\nIdentifier\x10\
    \x07\x12\x15\n\x11BuiltinIdentifier\x10\x08\x12\x12\n\x0eNullIdentifier\
    \x10\t\x12\x16\n\x12ConstantIdentifier\x10\n\x12\x1b\n\x17MutableGlobalI\
    dentifier\x10\x0b\x12\x17\n\x13ParameterIdentifier\x10\x0c\x12\x13\n\x0f\
    LocalIdentifier\x10\r\x12\x16\n\x12ShadowedIdentifier\x10\x0e\x12\x14\n\
    \x10ModuleIdentifier\x10\x0f\x12\x13\n\x0fMacroIdentifier\x10\x10\x12\
    \x11\n\rStringLiteral\x10\x11\x12\x16\n\x12StringLiteralRegex\x10\x12\
    \x12\x17\n\x13StringLiteralEscape\x10\x13\x12\x18\n\x14StringLiteralSpec\
    ial\x10\x14\x12\x14\n\x10StringLiteralKey\x10\x15\x12\x14\n\x10Character\
    Literal\x10\x16\x12\x12\n\x0eNumericLiteral\x10\x17\x12\x12\n\x0eBoolean\
    Literal\x10\x18\x12\x16\n\x12FunctionDefinition\x10\x19\x12\x13\n\x0fMac\
    roDefinition\x10\x1a\x12\x12\n\x0eTypeIdentifier\x10\x1b\x12\x19\n\x15Bu\
    iltinTypeIdentifier\x10\x1c\x12\x17\n\x13AttributeIdentifier\x10\x1d\x12\
    \x07\n\x03Tag\x10\x1e\x12\x10\n\x0cTagAttribute\x10\x1f\x12\x10\n\x0cTag\
    Delimiter\x10\x20*V\n\x08Severity\x12\x17\n\x13UnspecifiedSeverity\x10\0\
    \x12\t\n\x05Error\x10\x01\x12\x0b\n\x07Warning\x10\x02\x12\x0f\n\x0bInfo\
    rmation\x10\x03\x12\x08\n\x04Hint\x10\x04*N\n\rDiagnosticTag\x12\x1c\n\
    \x18UnspecifiedDiagnosticTag\x10\0\x12\x0f\n\x0bUnnecessary\x10\x01\x12\
    \x0e\n\nDeprecated\x10\x02B>Z<github.com/sourcegraph/sourcegraph/lib/cod\
    eintel/lsif_typed/J\xb7~\n\x07\x12\x05\n\0\xec\x02\x01\n\x82\x04\n\x01\
    \x0c\x12\x03\n\0\x122\xf7\x03\x20An\x20index\x20contains\x20one\x20or\
    \x20more\x20pieces\x20of\x20information\x20about\x20a\x20given\x20piece\
    \x20of\n\x20source\x20code\x20or\x20software\x20artifact.\x20Complementa\
    ry\x20information\x20can\x20be\x20merged\n\x20together\x20from\x20multip\
    le\x20sources\x20to\x20provide\x20a\x20unified\x20code\x20intelligence\n\
    \x20experience.\n\n\x20Programs\x20producing\x20a\x20file\x20of\x20this\
    \x20format\x20is\x20an\x20\"indexer\"\x20and\x20may\x20operate\n\x20some\
    where\x20on\x20the\x20spectrum\x20between\x20precision,\x20such\x20as\
    \x20indexes\x20produced\x20by\n\x20compiler-backed\x20indexers,\x20and\
    \x20heurstics,\x20such\x20as\x20indexes\x20produced\x20by\x20local\n\x20\
    syntax-directed\x20analysis\x20for\x20scope\x20rules.\n\n\x08\n\x01\x02\
    \x12\x03\x0c\0!\n\x08\n\x01\x08\x12\x03\x0e\0S\n\t\n\x02\x08\x0b\x12\x03\
    \x0e\0S\n\xd1\x03\n\x02\x04\0\x12\x04\x16\0!\x01\x1a\xc4\x03\x20Index\
    \x20represents\x20a\x20complete\x20LSIF\x20index\x20for\x20a\x20workspac\
    e\x20this\x20is\x20rooted\x20at\x20a\n\x20single\x20directory.\x20An\x20\
    Index\x20message\x20payload\x20can\x20have\x20a\x20large\x20memory\x20fo\
    otprint\n\x20and\x20it's\x20therefore\x20recommended\x20to\x20emit\x20an\
    d\x20consume\x20an\x20Index\x20payload\x20one\x20field\n\x20value\x20at\
    \x20a\x20time.\x20\x20To\x20permit\x20streaming\x20consumption\x20of\x20\
    an\x20Index\x20payload,\x20the\n\x20`metadata`\x20field\x20must\x20appea\
    r\x20at\x20the\x20start\x20of\x20the\x20stream\x20and\x20must\x20only\
    \x20appear\n\x20once\x20in\x20the\x20stream.\x20Other\x20field\x20values\
    \x20may\x20appear\x20in\x20any\x20order.\n\n\n\n\x03\x04\0\x01\x12\x03\
    \x16\x08\r\n)\n\x04\x04\0\x02\0\x12\x03\x18\x02\x18\x1a\x1c\x20Metadata\
    \x20about\x20this\x20index.\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x18\
    \x02\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x18\x0b\x13\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03\x18\x16\x17\n3\n\x04\x04\0\x02\x01\x12\x03\x1a\x02\"\
    \x1a&\x20Documents\x20that\x20belong\x20to\x20this\x20index.\n\n\x0c\n\
    \x05\x04\0\x02\x01\x04\x12\x03\x1a\x02\n\n\x0c\n\x05\x04\0\x02\x01\x06\
    \x12\x03\x1a\x0b\x13\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x1a\x14\x1d\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x1a\x20!\n\xf8\x02\n\x04\x04\0\x02\
    \x02\x12\x03\x20\x022\x1a\xea\x02\x20(optional)\x20Symbols\x20that\x20ar\
    e\x20referenced\x20from\x20this\x20index\x20but\x20are\x20defined\x20in\
    \n\x20an\x20external\x20package\x20(a\x20separate\x20`Index`\x20message)\
    .\x20\x20Leave\x20this\x20field\x20empty\n\x20if\x20you\x20assume\x20the\
    \x20external\x20package\x20will\x20get\x20indexed\x20separately.\x20If\
    \x20the\n\x20external\x20package\x20won't\x20get\x20indexed\x20for\x20so\
    me\x20reason\x20then\x20you\x20can\x20use\x20this\n\x20field\x20to\x20pr\
    ovide\x20hover\x20documentation\x20for\x20those\x20external\x20symbols.\
    \n\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03\x20\x02\n\n\x0c\n\x05\x04\0\x02\
    \x02\x06\x12\x03\x20\x0b\x1c\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x20\
    \x1d-\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x2001\n\n\n\x02\x04\x01\x12\
    \x04#\0/\x01\n\n\n\x03\x04\x01\x01\x12\x03#\x08\x10\nN\n\x04\x04\x01\x02\
    \0\x12\x03%\x02\x1e\x1aA\x20Which\x20version\x20of\x20this\x20protocol\
    \x20was\x20used\x20to\x20generate\x20this\x20index?\n\n\x0c\n\x05\x04\
    \x01\x02\0\x06\x12\x03%\x02\x11\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03%\
    \x12\x19\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03%\x1c\x1d\nC\n\x04\x04\x01\
    \x02\x01\x12\x03'\x02\x19\x1a6\x20Information\x20about\x20the\x20tool\
    \x20that\x20produced\x20this\x20index.\n\n\x0c\n\x05\x04\x01\x02\x01\x06\
    \x12\x03'\x02\n\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03'\x0b\x14\n\x0c\n\
    \x05\x04\x01\x02\x01\x03\x12\x03'\x17\x18\n\xa2\x01\n\x04\x04\x01\x02\
    \x02\x12\x03+\x02\x1a\x1a\x94\x01\x20URI-encoded\x20absolute\x20path\x20\
    to\x20the\x20root\x20directory\x20of\x20this\x20index.\x20All\n\x20docum\
    ents\x20in\x20this\x20index\x20must\x20appear\x20in\x20a\x20subdirectory\
    \x20of\x20this\x20root\n\x20directory.\n\n\x0c\n\x05\x04\x01\x02\x02\x05\
    \x12\x03+\x02\x08\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03+\t\x15\n\x0c\n\
    \x05\x04\x01\x02\x02\x03\x12\x03+\x18\x19\nl\n\x04\x04\x01\x02\x03\x12\
    \x03.\x02*\x1a_\x20Text\x20encoding\x20of\x20the\x20source\x20files\x20o\
    n\x20disk\x20that\x20are\x20referenced\x20from\n\x20`Document.relative_p\
    ath`.\n\n\x0c\n\x05\x04\x01\x02\x03\x06\x12\x03.\x02\x0e\n\x0c\n\x05\x04\
    \x01\x02\x03\x01\x12\x03.\x0f%\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03.(\
    )\n\n\n\x02\x05\0\x12\x041\03\x01\n\n\n\x03\x05\0\x01\x12\x031\x05\x14\n\
    \x0b\n\x04\x05\0\x02\0\x12\x032\x04#\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\
    2\x04\x1e\n\x0c\n\x05\x05\0\x02\0\x02\x12\x032!\"\n\n\n\x02\x05\x01\x12\
    \x045\09\x01\n\n\n\x03\x05\x01\x01\x12\x035\x05\x11\n\x0b\n\x04\x05\x01\
    \x02\0\x12\x036\x02\x1e\n\x0c\n\x05\x05\x01\x02\0\x01\x12\x036\x02\x19\n\
    \x0c\n\x05\x05\x01\x02\0\x02\x12\x036\x1c\x1d\n\x0b\n\x04\x05\x01\x02\
    \x01\x12\x037\x02\x0b\n\x0c\n\x05\x05\x01\x02\x01\x01\x12\x037\x02\x06\n\
    \x0c\n\x05\x05\x01\x02\x01\x02\x12\x037\t\n\n\x0b\n\x04\x05\x01\x02\x02\
    \x12\x038\x02\x0c\n\x0c\n\x05\x05\x01\x02\x02\x01\x12\x038\x02\x07\n\x0c\
    \n\x05\x05\x01\x02\x02\x02\x12\x038\n\x0b\n\n\n\x02\x04\x02\x12\x04;\0B\
    \x01\n\n\n\x03\x04\x02\x01\x12\x03;\x08\x10\n<\n\x04\x04\x02\x02\0\x12\
    \x03=\x02\x12\x1a/\x20Name\x20of\x20the\x20indexer\x20that\x20produced\
    \x20this\x20index.\n\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03=\x02\x08\n\
    \x0c\n\x05\x04\x02\x02\0\x01\x12\x03=\t\r\n\x0c\n\x05\x04\x02\x02\0\x03\
    \x12\x03=\x10\x11\n?\n\x04\x04\x02\x02\x01\x12\x03?\x02\x15\x1a2\x20Vers\
    ion\x20of\x20the\x20indexer\x20that\x20produced\x20this\x20index.\n\n\
    \x0c\n\x05\x04\x02\x02\x01\x05\x12\x03?\x02\x08\n\x0c\n\x05\x04\x02\x02\
    \x01\x01\x12\x03?\t\x10\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03?\x13\x14\
    \nL\n\x04\x04\x02\x02\x02\x12\x03A\x02\x20\x1a?\x20Command-line\x20argum\
    ents\x20that\x20were\x20used\x20to\x20invoke\x20this\x20indexer.\n\n\x0c\
    \n\x05\x04\x02\x02\x02\x04\x12\x03A\x02\n\n\x0c\n\x05\x04\x02\x02\x02\
    \x05\x12\x03A\x0b\x11\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03A\x12\x1b\n\
    \x0c\n\x05\x04\x02\x02\x02\x03\x12\x03A\x1e\x1f\nH\n\x02\x04\x03\x12\x04\
    E\0N\x01\x1a<\x20Document\x20defines\x20the\x20metadata\x20about\x20a\
    \x20source\x20file\x20on\x20disk.\n\n\n\n\x03\x04\x03\x01\x12\x03E\x08\
    \x10\n\xcd\x01\n\x04\x04\x03\x02\0\x12\x03I\x02\x1b\x1a\xbf\x01\x20(Requ\
    ired)\x20Path\x20to\x20the\x20text\x20document\x20relative\x20to\x20the\
    \x20directory\x20supplied\x20in\n\x20the\x20associated\x20`Metadata.proj\
    ect_root`.\x20Not\x20URI-encoded.\x20This\x20value\x20should\n\x20not\
    \x20begin\x20with\x20a\x20directory\x20separator.\n\n\x0c\n\x05\x04\x03\
    \x02\0\x05\x12\x03I\x02\x08\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03I\t\x16\
    \n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03I\x19\x1a\n4\n\x04\x04\x03\x02\x01\
    \x12\x03K\x02&\x1a'\x20Occurrences\x20that\x20appear\x20in\x20this\x20fi\
    le.\n\n\x0c\n\x05\x04\x03\x02\x01\x04\x12\x03K\x02\n\n\x0c\n\x05\x04\x03\
    \x02\x01\x06\x12\x03K\x0b\x15\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03K\
    \x16!\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03K$%\n=\n\x04\x04\x03\x02\
    \x02\x12\x03M\x02)\x1a0\x20Symbols\x20that\x20are\x20defined\x20within\
    \x20this\x20document.\n\n\x0c\n\x05\x04\x03\x02\x02\x04\x12\x03M\x02\n\n\
    \x0c\n\x05\x04\x03\x02\x02\x06\x12\x03M\x0b\x1c\n\x0c\n\x05\x04\x03\x02\
    \x02\x01\x12\x03M\x1d$\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03M'(\n\xb7\
    \x0c\n\x02\x04\x04\x12\x04m\0q\x01\x1a\xaa\x0c\x20Symbol\x20is\x20simila\
    r\x20to\x20a\x20URI,\x20it\x20identifies\x20a\x20class,\x20method,\x20or\
    \x20a\x20local\n\x20variable.\x20`SymbolInformation`\x20contains\x20rich\
    \x20metadata\x20about\x20symbols\x20such\x20as\n\x20the\x20docstring.\n\
    \n\x20Symbol\x20has\x20a\x20standardized\x20string\x20representation,\
    \x20which\x20can\x20be\x20used\n\x20interchangeably\x20with\x20`Symbol`.\
    \x20The\x20syntax\x20for\x20Symbol\x20is\x20the\x20following:\n\x20```\n\
    \x20\x20\x20<symbol>\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20::=\x20<scheme>\x20'\x20'\x20<package>\x20'\x20'\x20{\x20<descri\
    ptor>\x20}\x20|\x20'local\x20'\x20<local-id>\n\x20\x20\x20<package>\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20::=\x20<manager>\x20\
    '\x20'\x20<package-name>\x20'\x20'\x20<version>\n\x20\x20\x20<scheme>\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20::=\x20any\
    \x20UTF-8\x20character,\x20escape\x20spaces\x20with\x20double\x20space.\
    \n\x20\x20\x20<manager>\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20::=\x20same\x20as\x20above\n\x20\x20\x20<package-name>\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20::=\x20same\x20as\x20above\n\x20\x20\x20<ver\
    sion>\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20::=\x20same\
    \x20as\x20above\n\x20\x20\x20<descriptor>\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20::=\x20<package>\x20|\x20<type>\x20|\x20<term>\x20|\x20<\
    method>\x20|\x20<type-parameter>\x20|\x20<parameter>\x20|\x20<meta>\n\
    \x20\x20\x20<package>\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20::=\x20<name>\x20'/'\n\x20\x20\x20<type>\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20::=\x20<name>\x20'#'\n\x20\
    \x20\x20<term>\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20::=\x20<name>\x20'.'\n\x20\x20\x20<meta>\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20::=\x20<name>\x20':'\n\
    \x20\x20\x20<method>\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20::=\x20<name>\x20'('\x20<method-disambiguator>\x20').'\n\x20\x20\
    \x20<type-parameter>\x20\x20\x20\x20\x20\x20\x20::=\x20'['\x20<name>\x20\
    ']'\n\x20\x20\x20<parameter>\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20::=\x20'('\x20<name>\x20')'\n\x20\x20\x20<name>\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20::=\x20<identifier>\n\
    \x20\x20\x20<method-disambiguator>\x20::=\x20<simple-identifier>\n\x20\
    \x20\x20<identifier>\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20::=\x20<\
    simple-identifier>\x20|\x20<escaped-identifier>\n\x20\x20\x20<simple-ide\
    ntifier>\x20\x20\x20\x20::=\x20{\x20<identifier-character>\x20}\n\x20\
    \x20\x20<identifier-character>\x20::=\x20'_'\x20|\x20'-'\x20|\x20'$'\x20\
    |\x20ASCII\x20letter\x20or\x20digit\n\x20\x20\x20<escaped-identifier>\
    \x20\x20\x20::=\x20'`'\x20{\x20<escaped-character>\x20}\x20'`'\n\x20\x20\
    \x20<escaped-characters>\x20\x20\x20::=\x20any\x20UTF-8\x20character,\
    \x20escape\x20backticks\x20with\x20double\x20backtick.\n\x20```\n\n\n\n\
    \x03\x04\x04\x01\x12\x03m\x08\x0e\n\x0b\n\x04\x04\x04\x02\0\x12\x03n\x04\
    \x16\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03n\x04\n\n\x0c\n\x05\x04\x04\
    \x02\0\x01\x12\x03n\x0b\x11\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03n\x14\
    \x15\n\x0b\n\x04\x04\x04\x02\x01\x12\x03o\x04\x18\n\x0c\n\x05\x04\x04\
    \x02\x01\x06\x12\x03o\x04\x0b\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03o\
    \x0c\x13\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03o\x16\x17\n\x0b\n\x04\
    \x04\x04\x02\x02\x12\x03p\x04(\n\x0c\n\x05\x04\x04\x02\x02\x04\x12\x03p\
    \x04\x0c\n\x0c\n\x05\x04\x04\x02\x02\x06\x12\x03p\r\x17\n\x0c\n\x05\x04\
    \x04\x02\x02\x01\x12\x03p\x18#\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x03p&\
    '\n\n\n\x02\x04\x05\x12\x04s\0w\x01\n\n\n\x03\x04\x05\x01\x12\x03s\x08\
    \x0f\n\x0b\n\x04\x04\x05\x02\0\x12\x03t\x04\x17\n\x0c\n\x05\x04\x05\x02\
    \0\x05\x12\x03t\x04\n\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03t\x0b\x12\n\
    \x0c\n\x05\x04\x05\x02\0\x03\x12\x03t\x15\x16\n\x0b\n\x04\x04\x05\x02\
    \x01\x12\x03u\x04\x14\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x03u\x04\n\n\
    \x0c\n\x05\x04\x05\x02\x01\x01\x12\x03u\x0b\x0f\n\x0c\n\x05\x04\x05\x02\
    \x01\x03\x12\x03u\x12\x13\n\x0b\n\x04\x04\x05\x02\x02\x12\x03v\x04\x17\n\
    \x0c\n\x05\x04\x05\x02\x02\x05\x12\x03v\x04\n\n\x0c\n\x05\x04\x05\x02\
    \x02\x01\x12\x03v\x0b\x12\n\x0c\n\x05\x04\x05\x02\x02\x03\x12\x03v\x15\
    \x16\n\x0b\n\x02\x04\x06\x12\x05y\0\x88\x01\x01\n\n\n\x03\x04\x06\x01\
    \x12\x03y\x08\x12\n\r\n\x04\x04\x06\x04\0\x12\x05z\x04\x84\x01\x05\n\x0c\
    \n\x05\x04\x06\x04\0\x01\x12\x03z\t\x0f\n\r\n\x06\x04\x06\x04\0\x02\0\
    \x12\x03{\x08\x1e\n\x0e\n\x07\x04\x06\x04\0\x02\0\x01\x12\x03{\x08\x19\n\
    \x0e\n\x07\x04\x06\x04\0\x02\0\x02\x12\x03{\x1c\x1d\n\r\n\x06\x04\x06\
    \x04\0\x02\x01\x12\x03|\x08\x14\n\x0e\n\x07\x04\x06\x04\0\x02\x01\x01\
    \x12\x03|\x08\x0f\n\x0e\n\x07\x04\x06\x04\0\x02\x01\x02\x12\x03|\x12\x13\
    \n\r\n\x06\x04\x06\x04\0\x02\x02\x12\x03}\x08\x11\n\x0e\n\x07\x04\x06\
    \x04\0\x02\x02\x01\x12\x03}\x08\x0c\n\x0e\n\x07\x04\x06\x04\0\x02\x02\
    \x02\x12\x03}\x0f\x10\n\r\n\x06\x04\x06\x04\0\x02\x03\x12\x03~\x08\x11\n\
    \x0e\n\x07\x04\x06\x04\0\x02\x03\x01\x12\x03~\x08\x0c\n\x0e\n\x07\x04\
    \x06\x04\0\x02\x03\x02\x12\x03~\x0f\x10\n\r\n\x06\x04\x06\x04\0\x02\x04\
    \x12\x03\x7f\x08\x13\n\x0e\n\x07\x04\x06\x04\0\x02\x04\x01\x12\x03\x7f\
    \x08\x0e\n\x0e\n\x07\x04\x06\x04\0\x02\x04\x02\x12\x03\x7f\x11\x12\n\x0e\
    \n\x06\x04\x06\x04\0\x02\x05\x12\x04\x80\x01\x08\x1a\n\x0f\n\x07\x04\x06\
    \x04\0\x02\x05\x01\x12\x04\x80\x01\x08\x15\n\x0f\n\x07\x04\x06\x04\0\x02\
    \x05\x02\x12\x04\x80\x01\x18\x19\n\x0e\n\x06\x04\x06\x04\0\x02\x06\x12\
    \x04\x81\x01\x08\x16\n\x0f\n\x07\x04\x06\x04\0\x02\x06\x01\x12\x04\x81\
    \x01\x08\x11\n\x0f\n\x07\x04\x06\x04\0\x02\x06\x02\x12\x04\x81\x01\x14\
    \x15\n.\n\x06\x04\x06\x04\0\x02\x07\x12\x04\x83\x01\x08\x11\x1a\x1e\x20C\
    an\x20be\x20used\x20for\x20any\x20purpose.\n\n\x0f\n\x07\x04\x06\x04\0\
    \x02\x07\x01\x12\x04\x83\x01\x08\x0c\n\x0f\n\x07\x04\x06\x04\0\x02\x07\
    \x02\x12\x04\x83\x01\x0f\x10\n\x0c\n\x04\x04\x06\x02\0\x12\x04\x85\x01\
    \x04\x14\n\r\n\x05\x04\x06\x02\0\x05\x12\x04\x85\x01\x04\n\n\r\n\x05\x04\
    \x06\x02\0\x01\x12\x04\x85\x01\x0b\x0f\n\r\n\x05\x04\x06\x02\0\x03\x12\
    \x04\x85\x01\x12\x13\n\x0c\n\x04\x04\x06\x02\x01\x12\x04\x86\x01\x04\x1d\
    \n\r\n\x05\x04\x06\x02\x01\x05\x12\x04\x86\x01\x04\n\n\r\n\x05\x04\x06\
    \x02\x01\x01\x12\x04\x86\x01\x0b\x18\n\r\n\x05\x04\x06\x02\x01\x03\x12\
    \x04\x86\x01\x1b\x1c\n\x0c\n\x04\x04\x06\x02\x02\x12\x04\x87\x01\x04\x16\
    \n\r\n\x05\x04\x06\x02\x02\x06\x12\x04\x87\x01\x04\n\n\r\n\x05\x04\x06\
    \x02\x02\x01\x12\x04\x87\x01\x0b\x11\n\r\n\x05\x04\x06\x02\x02\x03\x12\
    \x04\x87\x01\x14\x15\n\x83\x01\n\x02\x04\x07\x12\x06\x8c\x01\0\x97\x01\
    \x01\x1au\x20SymbolInformation\x20defines\x20metadata\x20about\x20a\x20s\
    ymbol,\x20such\x20as\x20the\x20symbol's\n\x20docstring\x20or\x20what\x20\
    package\x20it's\x20defined\x20it.\n\n\x0b\n\x03\x04\x07\x01\x12\x04\x8c\
    \x01\x08\x19\n\xa0\x01\n\x04\x04\x07\x02\0\x12\x04\x8f\x01\x02\x14\x1a\
    \x91\x01\x20Identifier\x20of\x20this\x20symbol,\x20which\x20can\x20be\
    \x20referenced\x20from\x20`Occurence.symbol`.\n\x20The\x20string\x20must\
    \x20be\x20formatted\x20according\x20to\x20the\x20grammar\x20in\x20`Symbo\
    l`.\n\n\r\n\x05\x04\x07\x02\0\x05\x12\x04\x8f\x01\x02\x08\n\r\n\x05\x04\
    \x07\x02\0\x01\x12\x04\x8f\x01\t\x0f\n\r\n\x05\x04\x07\x02\0\x03\x12\x04\
    \x8f\x01\x12\x13\n\xb6\x02\n\x04\x04\x07\x02\x01\x12\x04\x94\x01\x02$\
    \x1a\xa7\x02\x20(optional,\x20but\x20strongly\x20recommended)\x20The\x20\
    markdown-formatted\x20documentation\n\x20for\x20this\x20symbol.\x20This\
    \x20field\x20is\x20repeated\x20to\x20allow\x20different\x20kinds\x20of\n\
    \x20documentation.\x20\x20For\x20example,\x20it's\x20nice\x20to\x20inclu\
    de\x20both\x20the\x20signature\x20of\x20a\n\x20method\x20(parameters\x20\
    and\x20return\x20type)\x20along\x20with\x20the\x20accompanying\x20docstr\
    ing.\n\n\r\n\x05\x04\x07\x02\x01\x04\x12\x04\x94\x01\x02\n\n\r\n\x05\x04\
    \x07\x02\x01\x05\x12\x04\x94\x01\x0b\x11\n\r\n\x05\x04\x07\x02\x01\x01\
    \x12\x04\x94\x01\x12\x1f\n\r\n\x05\x04\x07\x02\x01\x03\x12\x04\x94\x01\"\
    #\n^\n\x04\x04\x07\x02\x02\x12\x04\x96\x01\x02*\x1aP\x20(optional)\x20Re\
    lationships\x20to\x20other\x20symbols\x20(e.g.,\x20implements,\x20type\
    \x20definition).\n\n\r\n\x05\x04\x07\x02\x02\x04\x12\x04\x96\x01\x02\n\n\
    \r\n\x05\x04\x07\x02\x02\x06\x12\x04\x96\x01\x0b\x17\n\r\n\x05\x04\x07\
    \x02\x02\x01\x12\x04\x96\x01\x18%\n\r\n\x05\x04\x07\x02\x02\x03\x12\x04\
    \x96\x01()\n\x0c\n\x02\x04\x08\x12\x06\x99\x01\0\xbf\x01\x01\n\x0b\n\x03\
    \x04\x08\x01\x12\x04\x99\x01\x08\x14\n\x0c\n\x04\x04\x08\x02\0\x12\x04\
    \x9a\x01\x04\x16\n\r\n\x05\x04\x08\x02\0\x05\x12\x04\x9a\x01\x04\n\n\r\n\
    \x05\x04\x08\x02\0\x01\x12\x04\x9a\x01\x0b\x11\n\r\n\x05\x04\x08\x02\0\
    \x03\x12\x04\x9a\x01\x14\x15\n\x8f\x08\n\x04\x04\x08\x02\x01\x12\x04\xb3\
    \x01\x04\x1a\x1a\x80\x08\x20When\x20resolving\x20\"Find\x20references\",\
    \x20this\x20field\x20documents\x20what\x20other\x20symbols\n\x20should\
    \x20be\x20included\x20together\x20with\x20this\x20symbol.\x20For\x20exam\
    ple,\x20consider\x20the\n\x20following\x20TypeScript\x20code\x20that\x20\
    defines\x20two\x20symbols\x20`Animal#sound()`\x20and\n\x20`Dog#sound()`:\
    \n\x20```ts\n\x20interface\x20Animal\x20{\n\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20^^^^^^\x20definition\x20Animal#\n\x20\x20\x20sound():\
    \x20string\n\x20\x20\x20^^^^^\x20definition\x20Animal#sound()\n\x20}\n\
    \x20class\x20Dog\x20implements\x20Animal\x20{\n\x20\x20\x20\x20\x20\x20\
    \x20^^^\x20definition\x20Dog#,\x20implementation_symbols\x20=\x20Animal#\
    \n\x20\x20\x20public\x20sound():\x20string\x20{\x20return\x20\"woof\"\
    \x20}\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20^^^^^\x20definition\x20Do\
    g#sound(),\x20references_symbols\x20=\x20Animal#sound(),\x20implementati\
    on_symbols\x20=\x20Animal#sound()\n\x20}\n\x20const\x20animal:\x20Animal\
    \x20=\x20new\x20Dog()\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20^^^^^^\x20reference\x20Animal#\n\x20console.log(animal.sound\
    ())\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20^^^^^\x20reference\x20Animal#sound()\n\x20```\n\x20Doing\
    \x20\"Find\x20references\"\x20on\x20the\x20symbol\x20`Animal#sound()`\
    \x20should\x20return\n\x20references\x20to\x20the\x20`Dog#sound()`\x20me\
    thod\x20as\x20well.\x20Vice-versa,\x20doing\x20\"Find\n\x20references\"\
    \x20on\x20the\x20`Dog#sound()`\x20method\x20should\x20include\x20referen\
    ces\x20to\x20the\n\x20`Animal#sound()`\x20method\x20as\x20well.\n\n\r\n\
    \x05\x04\x08\x02\x01\x05\x12\x04\xb3\x01\x04\x08\n\r\n\x05\x04\x08\x02\
    \x01\x01\x12\x04\xb3\x01\t\x15\n\r\n\x05\x04\x08\x02\x01\x03\x12\x04\xb3\
    \x01\x18\x19\n\xba\x04\n\x04\x04\x08\x02\x02\x12\x04\xbc\x01\x04\x1f\x1a\
    \xab\x04\x20Similar\x20to\x20`references_symbols`\x20but\x20for\x20\"Go\
    \x20to\x20implementation\".\n\x20It's\x20common\x20for\x20the\x20`implem\
    entation_symbols`\x20and\x20`references_symbols`\x20fields\n\x20have\x20\
    the\x20same\x20values\x20but\x20that's\x20not\x20always\x20the\x20case.\
    \n\x20In\x20the\x20TypeScript\x20example\x20above,\x20observe\x20that\
    \x20`implementation_symbols`\x20has\n\x20the\x20value\x20`\"Animal#\"`\
    \x20for\x20the\x20\"Dog#\"\x20symbol\x20while\x20`references_symbols`\
    \x20is\n\x20empty.\x20When\x20requesting\x20\"Find\x20references\"\x20on\
    \x20the\x20\"Animal#\"\x20symbol\x20we\x20don't\n\x20want\x20to\x20inclu\
    de\x20references\x20to\x20\"Dog#\"\x20even\x20if\x20\"Go\x20to\x20implem\
    entation\"\x20on\x20the\n\x20\"Animal#\"\x20symbol\x20should\x20navigate\
    \x20to\x20the\x20\"Dog#\"\x20symbol.\n\n\r\n\x05\x04\x08\x02\x02\x05\x12\
    \x04\xbc\x01\x04\x08\n\r\n\x05\x04\x08\x02\x02\x01\x12\x04\xbc\x01\t\x1a\
    \n\r\n\x05\x04\x08\x02\x02\x03\x12\x04\xbc\x01\x1d\x1e\nP\n\x04\x04\x08\
    \x02\x03\x12\x04\xbe\x01\x04\x20\x1aB\x20Similar\x20to\x20`references_sy\
    mbols`\x20but\x20for\x20\"Go\x20to\x20type\x20definition\".\n\n\r\n\x05\
    \x04\x08\x02\x03\x05\x12\x04\xbe\x01\x04\x08\n\r\n\x05\x04\x08\x02\x03\
    \x01\x12\x04\xbe\x01\t\x1b\n\r\n\x05\x04\x08\x02\x03\x03\x12\x04\xbe\x01\
    \x1e\x1f\n\x8a\x03\n\x02\x05\x02\x12\x06\xc6\x01\0\xd4\x01\x01\x1a\xfb\
    \x02\x20SymbolRole\x20declares\x20what\x20\"role\"\x20a\x20symbol\x20has\
    \x20in\x20an\x20occurrence.\x20\x20A\x20role\x20is\n\x20encoded\x20as\
    \x20a\x20bitmask\x20where\x20each\x20bit\x20represents\x20a\x20different\
    \x20role.\x20For\x20example,\n\x20to\x20determine\x20if\x20the\x20`Impor\
    t`\x20role\x20is\x20set\x20test\x20whether\x20the\x20second\x20bit\x20of\
    \x20the\n\x20enum\x20value\x20is\x20defined.\x20In\x20psuedo-code,\x20th\
    is\x20can\x20be\x20implemented\x20with\x20the\n\x20logic:\x20`const\x20i\
    sImportRole\x20=\x20(role.value\x20&\x20SymbolRole.Import.value)\x20>\
    \x200`.\n\n\x0b\n\x03\x05\x02\x01\x12\x04\xc6\x01\x05\x0f\n\x0c\n\x04\
    \x05\x02\x02\0\x12\x04\xc7\x01\x02\x1c\n\r\n\x05\x05\x02\x02\0\x01\x12\
    \x04\xc7\x01\x02\x17\n\r\n\x05\x05\x02\x02\0\x02\x12\x04\xc7\x01\x1a\x1b\
    \nT\n\x04\x05\x02\x02\x01\x12\x04\xc9\x01\x02\x13\x1aF\x20Is\x20the\x20s\
    ymbol\x20defined\x20here?\x20If\x20not,\x20then\x20this\x20is\x20a\x20sy\
    mbol\x20reference.\n\n\r\n\x05\x05\x02\x02\x01\x01\x12\x04\xc9\x01\x02\
    \x0c\n\r\n\x05\x05\x02\x02\x01\x02\x12\x04\xc9\x01\x0f\x12\n,\n\x04\x05\
    \x02\x02\x02\x12\x04\xcb\x01\x02\x0f\x1a\x1e\x20Is\x20the\x20symbol\x20i\
    mported\x20here?\n\n\r\n\x05\x05\x02\x02\x02\x01\x12\x04\xcb\x01\x02\x08\
    \n\r\n\x05\x05\x02\x02\x02\x02\x12\x04\xcb\x01\x0b\x0e\n+\n\x04\x05\x02\
    \x02\x03\x12\x04\xcd\x01\x02\x14\x1a\x1d\x20Is\x20the\x20symbol\x20writt\
    en\x20here?\n\n\r\n\x05\x05\x02\x02\x03\x01\x12\x04\xcd\x01\x02\r\n\r\n\
    \x05\x05\x02\x02\x03\x02\x12\x04\xcd\x01\x10\x13\n(\n\x04\x05\x02\x02\
    \x04\x12\x04\xcf\x01\x02\x13\x1a\x1a\x20Is\x20the\x20symbol\x20read\x20h\
    ere?\n\n\r\n\x05\x05\x02\x02\x04\x01\x12\x04\xcf\x01\x02\x0c\n\r\n\x05\
    \x05\x02\x02\x04\x02\x12\x04\xcf\x01\x0f\x12\n0\n\x04\x05\x02\x02\x05\
    \x12\x04\xd1\x01\x02\x13\x1a\"\x20Is\x20the\x20symbol\x20in\x20generated\
    \x20code?\n\n\r\n\x05\x05\x02\x02\x05\x01\x12\x04\xd1\x01\x02\x0b\n\r\n\
    \x05\x05\x02\x02\x05\x02\x12\x04\xd1\x01\x0e\x12\n+\n\x04\x05\x02\x02\
    \x06\x12\x04\xd3\x01\x02\x0e\x1a\x1d\x20Is\x20the\x20symbol\x20in\x20tes\
    t\x20code?\n\n\r\n\x05\x05\x02\x02\x06\x01\x12\x04\xd3\x01\x02\x06\n\r\n\
    \x05\x05\x02\x02\x06\x02\x12\x04\xd3\x01\t\r\n\x0c\n\x02\x05\x03\x12\x06\
    \xd6\x01\0\xa7\x02\x01\n\x0b\n\x03\x05\x03\x01\x12\x04\xd6\x01\x05\x0f\n\
    \x0c\n\x04\x05\x03\x02\0\x12\x04\xd7\x01\x02\x1c\n\r\n\x05\x05\x03\x02\0\
    \x01\x12\x04\xd7\x01\x02\x17\n\r\n\x05\x05\x03\x02\0\x02\x12\x04\xd7\x01\
    \x1a\x1b\n\x1e\n\x04\x05\x03\x02\x01\x12\x04\xda\x01\x02\x0f\x1a\x10\x20\
    `+`,\x20`*`,\x20etc.\n\n\r\n\x05\x05\x03\x02\x01\x01\x12\x04\xda\x01\x02\
    \n\n\r\n\x05\x05\x03\x02\x01\x02\x12\x04\xda\x01\r\x0e\n;\n\x04\x05\x03\
    \x02\x02\x12\x04\xdd\x01\x02\x0e\x1a-\x20Comment,\x20including\x20commen\
    t\x20markers\x20and\x20text\n\n\r\n\x05\x05\x03\x02\x02\x01\x12\x04\xdd\
    \x01\x02\t\n\r\n\x05\x05\x03\x02\x02\x02\x12\x04\xdd\x01\x0c\r\n\x1b\n\
    \x04\x05\x03\x02\x03\x12\x04\xe0\x01\x02\x1b\x1a\r\x20`;`\x20`.`\x20`,`\
    \n\n\r\n\x05\x05\x03\x02\x03\x01\x12\x04\xe0\x01\x02\x16\n\r\n\x05\x05\
    \x03\x02\x03\x02\x12\x04\xe0\x01\x19\x1a\n2\n\x04\x05\x03\x02\x04\x12\
    \x04\xe2\x01\x02\x19\x1a$\x20(),\x20{},\x20[]\x20when\x20used\x20syntact\
    ically\n\n\r\n\x05\x05\x03\x02\x04\x01\x12\x04\xe2\x01\x02\x14\n\r\n\x05\
    \x05\x03\x02\x04\x02\x12\x04\xe2\x01\x17\x18\n%\n\x04\x05\x03\x02\x05\
    \x12\x04\xe4\x01\x02\x19\x1a\x17\x20`{}`\x20within\x20a\x20string.\n\n\r\
    \n\x05\x05\x03\x02\x05\x01\x12\x04\xe4\x01\x02\x14\n\r\n\x05\x05\x03\x02\
    \x05\x02\x12\x04\xe4\x01\x17\x18\n5\n\x04\x05\x03\x02\x06\x12\x04\xe7\
    \x01\x02\x0e\x1a'\x20`if`,\x20`else`,\x20`return`,\x20`class`,\x20etc.\n\
    \n\r\n\x05\x05\x03\x02\x06\x01\x12\x04\xe7\x01\x02\t\n\r\n\x05\x05\x03\
    \x02\x06\x02\x12\x04\xe7\x01\x0c\r\n|\n\x04\x05\x03\x02\x07\x12\x04\xeb\
    \x01\x02\x11\x1an\x20non-specific\x20variables,\x20function\x20calls,\
    \x20etc.\n\x20In\x20general,\x20prefer\x20more\x20specific\x20identifier\
    \x20kinds\x20if\x20possible.\n\n\r\n\x05\x05\x03\x02\x07\x01\x12\x04\xeb\
    \x01\x02\x0c\n\r\n\x05\x05\x03\x02\x07\x02\x12\x04\xeb\x01\x0f\x10\nN\n\
    \x04\x05\x03\x02\x08\x12\x04\xed\x01\x02\x18\x1a@\x20Identifiers\x20buil\
    tin\x20to\x20the\x20language:\x20`min`,\x20`print`\x20in\x20Python.\n\n\
    \r\n\x05\x05\x03\x02\x08\x01\x12\x04\xed\x01\x02\x13\n\r\n\x05\x05\x03\
    \x02\x08\x02\x12\x04\xed\x01\x16\x17\nS\n\x04\x05\x03\x02\t\x12\x04\xef\
    \x01\x02\x15\x1aE\x20Identifiers\x20builtin\x20to\x20the\x20language:\
    \x20`None`\x20in\x20Python,\x20`nil`\x20in\x20Go.\n\n\r\n\x05\x05\x03\
    \x02\t\x01\x12\x04\xef\x01\x02\x10\n\r\n\x05\x05\x03\x02\t\x02\x12\x04\
    \xef\x01\x13\x14\n.\n\x04\x05\x03\x02\n\x12\x04\xf1\x01\x02\x1a\x1a\x20\
    \x20`xyz`\x20in\x20`const\x20xyz\x20=\x20\"hello\"`\n\n\r\n\x05\x05\x03\
    \x02\n\x01\x12\x04\xf1\x01\x02\x14\n\r\n\x05\x05\x03\x02\n\x02\x12\x04\
    \xf1\x01\x17\x19\n'\n\x04\x05\x03\x02\x0b\x12\x04\xf3\x01\x02\x1f\x1a\
    \x19\x20`var\x20X\x20=\x20\"hello\"`\x20in\x20Go\n\n\r\n\x05\x05\x03\x02\
    \x0b\x01\x12\x04\xf3\x01\x02\x19\n\r\n\x05\x05\x03\x02\x0b\x02\x12\x04\
    \xf3\x01\x1c\x1e\n8\n\x04\x05\x03\x02\x0c\x12\x04\xf5\x01\x02\x1b\x1a*\
    \x20both\x20parameter\x20definition\x20and\x20references\n\n\r\n\x05\x05\
    \x03\x02\x0c\x01\x12\x04\xf5\x01\x02\x15\n\r\n\x05\x05\x03\x02\x0c\x02\
    \x12\x04\xf5\x01\x18\x1a\nX\n\x04\x05\x03\x02\r\x12\x04\xf7\x01\x02\x17\
    \x1aJ\x20identifiers\x20for\x20variable\x20definitions\x20and\x20referen\
    ces\x20within\x20a\x20local\x20scope\n\n\r\n\x05\x05\x03\x02\r\x01\x12\
    \x04\xf7\x01\x02\x11\n\r\n\x05\x05\x03\x02\r\x02\x12\x04\xf7\x01\x14\x16\
    \nT\n\x04\x05\x03\x02\x0e\x12\x04\xf9\x01\x02\x1a\x1aF\x20Used\x20when\
    \x20identifier\x20shadowes\x20some\x20other\x20identifier\x20within\x20t\
    he\x20scope\n\n\r\n\x05\x05\x03\x02\x0e\x01\x12\x04\xf9\x01\x02\x14\n\r\
    \n\x05\x05\x03\x02\x0e\x02\x12\x04\xf9\x01\x17\x19\n\x1e\n\x04\x05\x03\
    \x02\x0f\x12\x04\xfb\x01\x02\x18\x1a\x10\x20`package\x20main`\n\n\r\n\
    \x05\x05\x03\x02\x0f\x01\x12\x04\xfb\x01\x02\x12\n\r\n\x05\x05\x03\x02\
    \x0f\x02\x12\x04\xfb\x01\x15\x17\n6\n\x04\x05\x03\x02\x10\x12\x04\xfd\
    \x01\x02\x17\x1a(\x20Macro\x20references\x20only,\x20not\x20definitions\
    \n\n\r\n\x05\x05\x03\x02\x10\x01\x12\x04\xfd\x01\x02\x11\n\r\n\x05\x05\
    \x03\x02\x10\x02\x12\x04\xfd\x01\x14\x16\n0\n\x04\x05\x03\x02\x11\x12\
    \x04\x80\x02\x02\x15\x1a\"\x20Literal\x20strings:\x20\"Hello,\x20world!\
    \"\n\n\r\n\x05\x05\x03\x02\x11\x01\x12\x04\x80\x02\x02\x0f\n\r\n\x05\x05\
    \x03\x02\x11\x02\x12\x04\x80\x02\x12\x14\n&\n\x04\x05\x03\x02\x12\x12\
    \x04\x82\x02\x02\x1a\x1a\x18\x20\".*\"\x20in\x20a\x20string\x20regex\n\n\
    \r\n\x05\x05\x03\x02\x12\x01\x12\x04\x82\x02\x02\x14\n\r\n\x05\x05\x03\
    \x02\x12\x02\x12\x04\x82\x02\x17\x19\n\x1a\n\x04\x05\x03\x02\x13\x12\x04\
    \x84\x02\x02\x1b\x1a\x0c\x20\"\\t\",\x20\"\\n\"\n\n\r\n\x05\x05\x03\x02\
    \x13\x01\x12\x04\x84\x02\x02\x15\n\r\n\x05\x05\x03\x02\x13\x02\x12\x04\
    \x84\x02\x18\x1a\nG\n\x04\x05\x03\x02\x14\x12\x04\x86\x02\x02\x1c\x1a9\
    \x20datetimes\x20within\x20strings,\x20special\x20words\x20within\x20a\
    \x20string\n\n\r\n\x05\x05\x03\x02\x14\x01\x12\x04\x86\x02\x02\x16\n\r\n\
    \x05\x05\x03\x02\x14\x02\x12\x04\x86\x02\x19\x1b\n+\n\x04\x05\x03\x02\
    \x15\x12\x04\x88\x02\x02\x18\x1a\x1d\x20\"key\"\x20in\x20{\x20\"key\":\
    \x20\"value\"\x20}\n\n\r\n\x05\x05\x03\x02\x15\x01\x12\x04\x88\x02\x02\
    \x12\n\r\n\x05\x05\x03\x02\x15\x02\x12\x04\x88\x02\x15\x17\nV\n\x04\x05\
    \x03\x02\x16\x12\x04\x8a\x02\x02\x18\x1aH\x20'c'\x20or\x20similar,\x20in\
    \x20languages\x20that\x20differentiate\x20strings\x20and\x20characters\n\
    \n\r\n\x05\x05\x03\x02\x16\x01\x12\x04\x8a\x02\x02\x12\n\r\n\x05\x05\x03\
    \x02\x16\x02\x12\x04\x8a\x02\x15\x17\n9\n\x04\x05\x03\x02\x17\x12\x04\
    \x8c\x02\x02\x16\x1a+\x20Literal\x20numbers,\x20both\x20floats\x20and\
    \x20integers\n\n\r\n\x05\x05\x03\x02\x17\x01\x12\x04\x8c\x02\x02\x10\n\r\
    \n\x05\x05\x03\x02\x17\x02\x12\x04\x8c\x02\x13\x15\n\x1f\n\x04\x05\x03\
    \x02\x18\x12\x04\x8e\x02\x02\x16\x1a\x11\x20`true`,\x20`false`\n\n\r\n\
    \x05\x05\x03\x02\x18\x01\x12\x04\x8e\x02\x02\x10\n\r\n\x05\x05\x03\x02\
    \x18\x02\x12\x04\x8e\x02\x13\x15\n\x91\x01\n\x04\x05\x03\x02\x19\x12\x04\
    \x93\x02\x02\x1a\x1a\x82\x01\x20Function\x20definition\x20only.\n\x20\
    \x20\x20\x20Included\x20because\x20many\x20editors\x20highlight\x20a\x20\
    function\x20definition\x20differently\n\x20\x20\x20\x20from\x20function\
    \x20calls.\n\n\r\n\x05\x05\x03\x02\x19\x01\x12\x04\x93\x02\x02\x14\n\r\n\
    \x05\x05\x03\x02\x19\x02\x12\x04\x93\x02\x17\x19\n\x88\x01\n\x04\x05\x03\
    \x02\x1a\x12\x04\x97\x02\x02\x17\x1az\x20Macro\x20definition\x20only.\n\
    \x20\x20\x20\x20Included\x20because\x20many\x20editors\x20highlight\x20a\
    \x20macro\x20definition\x20differently\n\x20\x20\x20\x20from\x20macro\
    \x20usages.\n\n\r\n\x05\x05\x03\x02\x1a\x01\x12\x04\x97\x02\x02\x11\n\r\
    \n\x05\x05\x03\x02\x1a\x02\x12\x04\x97\x02\x14\x16\n7\n\x04\x05\x03\x02\
    \x1b\x12\x04\x9a\x02\x02\x16\x1a)\x20non-builtin\x20types,\x20including\
    \x20namespaces\n\n\r\n\x05\x05\x03\x02\x1b\x01\x12\x04\x9a\x02\x02\x10\n\
    \r\n\x05\x05\x03\x02\x1b\x02\x12\x04\x9a\x02\x13\x15\nK\n\x04\x05\x03\
    \x02\x1c\x12\x04\x9c\x02\x02\x1d\x1a=\x20builtin\x20types\x20only,\x20su\
    ch\x20as\x20`str`\x20for\x20Python\x20or\x20`int`\x20in\x20Go\n\n\r\n\
    \x05\x05\x03\x02\x1c\x01\x12\x04\x9c\x02\x02\x17\n\r\n\x05\x05\x03\x02\
    \x1c\x02\x12\x04\x9c\x02\x1a\x1c\n7\n\x04\x05\x03\x02\x1d\x12\x04\x9f\
    \x02\x02\x1b\x1a)\x20Python\x20decorators,\x20c-like\x20__attribute__\n\
    \n\r\n\x05\x05\x03\x02\x1d\x01\x12\x04\x9f\x02\x02\x15\n\r\n\x05\x05\x03\
    \x02\x1d\x02\x12\x04\x9f\x02\x18\x1a\n&\n\x04\x05\x03\x02\x1e\x12\x04\
    \xa2\x02\x02\x0b\x1a\x18\x20Used\x20for\x20XML-like\x20tags\n\n\r\n\x05\
    \x05\x03\x02\x1e\x01\x12\x04\xa2\x02\x02\x05\n\r\n\x05\x05\x03\x02\x1e\
    \x02\x12\x04\xa2\x02\x08\n\n/\n\x04\x05\x03\x02\x1f\x12\x04\xa4\x02\x02\
    \x14\x1a!\x20Attribute\x20name\x20in\x20XML-like\x20tags\n\n\r\n\x05\x05\
    \x03\x02\x1f\x01\x12\x04\xa4\x02\x02\x0e\n\r\n\x05\x05\x03\x02\x1f\x02\
    \x12\x04\xa4\x02\x11\x13\n,\n\x04\x05\x03\x02\x20\x12\x04\xa6\x02\x02\
    \x14\x1a\x1e\x20Delimiters\x20for\x20XML-like\x20tags\n\n\r\n\x05\x05\
    \x03\x02\x20\x01\x12\x04\xa6\x02\x02\x0e\n\r\n\x05\x05\x03\x02\x20\x02\
    \x12\x04\xa6\x02\x11\x13\ng\n\x02\x04\t\x12\x06\xab\x02\0\xcf\x02\x01\
    \x1aY\x20Occurrence\x20associates\x20a\x20source\x20position\x20with\x20\
    a\x20symbol\x20and/or\x20highlighting\n\x20information.\n\n\x0b\n\x03\
    \x04\t\x01\x12\x04\xab\x02\x08\x12\n\xc7\x07\n\x04\x04\t\x02\0\x12\x04\
    \xbe\x02\x02\x1b\x1a\xb8\x07\x20Source\x20position\x20of\x20this\x20occu\
    rrence.\x20Must\x20be\x20exactly\x20three\x20or\x20four\n\x20elements:\n\
    \n\x20-\x20Four\x20elements:\x20`[startLine,\x20startCharacter,\x20endLi\
    ne,\x20endCharacter]`\n\x20-\x20Three\x20elements:\x20`[startLine,\x20st\
    artCharacter,\x20endCharacter]`.\x20The\x20end\x20line\n\x20\x20\x20is\
    \x20inferred\x20to\x20have\x20the\x20same\x20value\x20as\x20the\x20start\
    \x20line.\n\n\x20Line\x20numbers\x20and\x20characters\x20are\x20always\
    \x200-based.\x20Make\x20sure\x20to\x20increment\x20the\n\x20line/charact\
    er\x20values\x20before\x20displaying\x20them\x20in\x20an\x20editor-like\
    \x20UI\x20because\n\x20editors\x20conventionally\x20use\x201-based\x20nu\
    mbers.\n\n\x20Historical\x20note:\x20the\x20original\x20draft\x20of\x20t\
    his\x20schema\x20had\x20a\x20`Range`\x20message\n\x20type\x20with\x20`st\
    art`\x20and\x20`end`\x20fields\x20of\x20type\x20`Position`,\x20mirroring\
    \x20LSP.\n\x20Benchmarks\x20revealed\x20that\x20this\x20encoding\x20was\
    \x20inefficient\x20and\x20that\x20we\x20could\n\x20reduce\x20the\x20tota\
    l\x20payload\x20size\x20of\x20an\x20index\x20by\x2050%\x20by\x20using\
    \x20`repeated\x20int32`\n\x20instead.\x20\x20The\x20`repeated\x20int32`\
    \x20encoding\x20is\x20admittedly\x20more\x20embarrassing\x20to\n\x20work\
    \x20with\x20in\x20some\x20programming\x20languages\x20but\x20we\x20hope\
    \x20the\x20performance\n\x20improvements\x20make\x20up\x20for\x20it.\n\n\
    \r\n\x05\x04\t\x02\0\x04\x12\x04\xbe\x02\x02\n\n\r\n\x05\x04\t\x02\0\x05\
    \x12\x04\xbe\x02\x0b\x10\n\r\n\x05\x04\t\x02\0\x01\x12\x04\xbe\x02\x11\
    \x16\n\r\n\x05\x04\t\x02\0\x03\x12\x04\xbe\x02\x19\x1a\n\x8a\x01\n\x04\
    \x04\t\x02\x01\x12\x04\xc1\x02\x02\x14\x1a|\x20(optional)\x20The\x20symb\
    ol\x20that\x20appears\x20at\x20this\x20position.\x20See\n\x20`SymbolInfo\
    rmation.symbol`\x20for\x20how\x20to\x20format\x20symbols\x20as\x20string\
    s.\n\n\r\n\x05\x04\t\x02\x01\x05\x12\x04\xc1\x02\x02\x08\n\r\n\x05\x04\t\
    \x02\x01\x01\x12\x04\xc1\x02\t\x0f\n\r\n\x05\x04\t\x02\x01\x03\x12\x04\
    \xc1\x02\x12\x13\n\x8a\x01\n\x04\x04\t\x02\x02\x12\x04\xc4\x02\x02\x19\
    \x1a|\x20(optional)\x20Bitmask\x20for\x20what\x20`SymbolRole`\x20apply\
    \x20to\x20this\x20occurrence.\x20See\n\x20`SymbolRole`\x20for\x20how\x20\
    to\x20read\x20and\x20write\x20this\x20field.\n\n\r\n\x05\x04\t\x02\x02\
    \x05\x12\x04\xc4\x02\x02\x07\n\r\n\x05\x04\t\x02\x02\x01\x12\x04\xc4\x02\
    \x08\x14\n\r\n\x05\x04\t\x02\x02\x03\x12\x04\xc4\x02\x17\x18\n\xf0\x02\n\
    \x04\x04\t\x02\x03\x12\x04\xca\x02\x02-\x1a\xe1\x02\x20(optional)\x20Mar\
    kdown-formatted\x20documentation\x20for\x20this\x20specific\x20range.\
    \x20\x20If\n\x20empty,\x20the\x20`Symbol.documentation`\x20field\x20is\
    \x20used\x20instead.\x20One\x20example\n\x20where\x20this\x20field\x20mi\
    ght\x20be\x20useful\x20is\x20when\x20the\x20symbol\x20represents\x20a\
    \x20generic\n\x20function\x20(with\x20abstract\x20type\x20parameters\x20\
    such\x20as\x20`List<T>`)\x20and\x20at\x20this\n\x20occurrence\x20we\x20k\
    now\x20the\x20exact\x20values\x20(such\x20as\x20`List<String>`).\n\n\r\n\
    \x05\x04\t\x02\x03\x04\x12\x04\xca\x02\x02\n\n\r\n\x05\x04\t\x02\x03\x05\
    \x12\x04\xca\x02\x0b\x11\n\r\n\x05\x04\t\x02\x03\x01\x12\x04\xca\x02\x12\
    (\n\r\n\x05\x04\t\x02\x03\x03\x12\x04\xca\x02+,\nX\n\x04\x04\t\x02\x04\
    \x12\x04\xcc\x02\x02\x1d\x1aJ\x20(optional)\x20What\x20syntax\x20highlig\
    hting\x20class\x20should\x20be\x20used\x20for\x20this\x20range?\n\n\r\n\
    \x05\x04\t\x02\x04\x06\x12\x04\xcc\x02\x02\x0c\n\r\n\x05\x04\t\x02\x04\
    \x01\x12\x04\xcc\x02\r\x18\n\r\n\x05\x04\t\x02\x04\x03\x12\x04\xcc\x02\
    \x1b\x1c\nL\n\x04\x04\t\x02\x05\x12\x04\xce\x02\x02&\x1a>\x20Diagnostics\
    \x20that\x20have\x20been\x20reported\x20for\x20this\x20specific\x20range\
    .\n\n\r\n\x05\x04\t\x02\x05\x04\x12\x04\xce\x02\x02\n\n\r\n\x05\x04\t\
    \x02\x05\x06\x12\x04\xce\x02\x0b\x15\n\r\n\x05\x04\t\x02\x05\x01\x12\x04\
    \xce\x02\x16!\n\r\n\x05\x04\t\x02\x05\x03\x12\x04\xce\x02$%\nw\n\x02\x04\
    \n\x12\x06\xd3\x02\0\xde\x02\x01\x1ai\x20Represents\x20a\x20diagnostic,\
    \x20such\x20as\x20a\x20compiler\x20error\x20or\x20warning,\x20which\x20s\
    hould\x20be\n\x20reported\x20for\x20a\x20document.\n\n\x0b\n\x03\x04\n\
    \x01\x12\x04\xd3\x02\x08\x12\nW\n\x04\x04\n\x02\0\x12\x04\xd5\x02\x02\
    \x18\x1aI\x20Should\x20this\x20diagnostic\x20be\x20reported\x20as\x20an\
    \x20error,\x20warning,\x20info,\x20or\x20hint?\n\n\r\n\x05\x04\n\x02\0\
    \x06\x12\x04\xd5\x02\x02\n\n\r\n\x05\x04\n\x02\0\x01\x12\x04\xd5\x02\x0b\
    \x13\n\r\n\x05\x04\n\x02\0\x03\x12\x04\xd5\x02\x16\x17\nR\n\x04\x04\n\
    \x02\x01\x12\x04\xd7\x02\x02\x12\x1aD\x20Code\x20of\x20this\x20diagnosti\
    c,\x20which\x20might\x20appear\x20in\x20the\x20user\x20interface.\n\n\r\
    \n\x05\x04\n\x02\x01\x05\x12\x04\xd7\x02\x02\x08\n\r\n\x05\x04\n\x02\x01\
    \x01\x12\x04\xd7\x02\t\r\n\r\n\x05\x04\n\x02\x01\x03\x12\x04\xd7\x02\x10\
    \x11\n+\n\x04\x04\n\x02\x02\x12\x04\xd9\x02\x02\x15\x1a\x1d\x20Message\
    \x20of\x20this\x20diagnostic.\n\n\r\n\x05\x04\n\x02\x02\x05\x12\x04\xd9\
    \x02\x02\x08\n\r\n\x05\x04\n\x02\x02\x01\x12\x04\xd9\x02\t\x10\n\r\n\x05\
    \x04\n\x02\x02\x03\x12\x04\xd9\x02\x13\x14\ns\n\x04\x04\n\x02\x03\x12\
    \x04\xdc\x02\x02\x14\x1ae\x20Human-readable\x20string\x20describing\x20t\
    he\x20source\x20of\x20this\x20diagnostic,\x20e.g.\n\x20'typescript'\x20o\
    r\x20'super\x20lint'.\n\n\r\n\x05\x04\n\x02\x03\x05\x12\x04\xdc\x02\x02\
    \x08\n\r\n\x05\x04\n\x02\x03\x01\x12\x04\xdc\x02\t\x0f\n\r\n\x05\x04\n\
    \x02\x03\x03\x12\x04\xdc\x02\x12\x13\n\x0c\n\x04\x04\n\x02\x04\x12\x04\
    \xdd\x02\x02\"\n\r\n\x05\x04\n\x02\x04\x04\x12\x04\xdd\x02\x02\n\n\r\n\
    \x05\x04\n\x02\x04\x06\x12\x04\xdd\x02\x0b\x18\n\r\n\x05\x04\n\x02\x04\
    \x01\x12\x04\xdd\x02\x19\x1d\n\r\n\x05\x04\n\x02\x04\x03\x12\x04\xdd\x02\
    \x20!\n\x0c\n\x02\x05\x04\x12\x06\xe0\x02\0\xe6\x02\x01\n\x0b\n\x03\x05\
    \x04\x01\x12\x04\xe0\x02\x05\r\n\x0c\n\x04\x05\x04\x02\0\x12\x04\xe1\x02\
    \x04\x1c\n\r\n\x05\x05\x04\x02\0\x01\x12\x04\xe1\x02\x04\x17\n\r\n\x05\
    \x05\x04\x02\0\x02\x12\x04\xe1\x02\x1a\x1b\n\x0c\n\x04\x05\x04\x02\x01\
    \x12\x04\xe2\x02\x04\x0e\n\r\n\x05\x05\x04\x02\x01\x01\x12\x04\xe2\x02\
    \x04\t\n\r\n\x05\x05\x04\x02\x01\x02\x12\x04\xe2\x02\x0c\r\n\x0c\n\x04\
    \x05\x04\x02\x02\x12\x04\xe3\x02\x04\x10\n\r\n\x05\x05\x04\x02\x02\x01\
    \x12\x04\xe3\x02\x04\x0b\n\r\n\x05\x05\x04\x02\x02\x02\x12\x04\xe3\x02\
    \x0e\x0f\n\x0c\n\x04\x05\x04\x02\x03\x12\x04\xe4\x02\x04\x14\n\r\n\x05\
    \x05\x04\x02\x03\x01\x12\x04\xe4\x02\x04\x0f\n\r\n\x05\x05\x04\x02\x03\
    \x02\x12\x04\xe4\x02\x12\x13\n\x0c\n\x04\x05\x04\x02\x04\x12\x04\xe5\x02\
    \x04\r\n\r\n\x05\x05\x04\x02\x04\x01\x12\x04\xe5\x02\x04\x08\n\r\n\x05\
    \x05\x04\x02\x04\x02\x12\x04\xe5\x02\x0b\x0c\n\x0c\n\x02\x05\x05\x12\x06\
    \xe8\x02\0\xec\x02\x01\n\x0b\n\x03\x05\x05\x01\x12\x04\xe8\x02\x05\x12\n\
    \x0c\n\x04\x05\x05\x02\0\x12\x04\xe9\x02\x04!\n\r\n\x05\x05\x05\x02\0\
    \x01\x12\x04\xe9\x02\x04\x1c\n\r\n\x05\x05\x05\x02\0\x02\x12\x04\xe9\x02\
    \x1f\x20\n\x0c\n\x04\x05\x05\x02\x01\x12\x04\xea\x02\x04\x14\n\r\n\x05\
    \x05\x05\x02\x01\x01\x12\x04\xea\x02\x04\x0f\n\r\n\x05\x05\x05\x02\x01\
    \x02\x12\x04\xea\x02\x12\x13\n\x0c\n\x04\x05\x05\x02\x02\x12\x04\xeb\x02\
    \x04\x13\n\r\n\x05\x05\x05\x02\x02\x01\x12\x04\xeb\x02\x04\x0e\n\r\n\x05\
    \x05\x05\x02\x02\x02\x12\x04\xeb\x02\x11\x12b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
