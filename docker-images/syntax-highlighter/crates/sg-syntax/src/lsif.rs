// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `lib/codeintel/lsif_typed/lsif.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct Index {
    // message fields
    pub metadata: ::protobuf::SingularPtrField<Metadata>,
    pub document: ::protobuf::RepeatedField<Document>,
    pub external_symbols: ::protobuf::RepeatedField<SymbolInformation>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Index {
    fn default() -> &'a Index {
        <Index as ::protobuf::Message>::default_instance()
    }
}

impl Index {
    pub fn new() -> Index {
        ::std::default::Default::default()
    }

    // .lib.codeintel.lsif_typed.Metadata metadata = 1;


    pub fn get_metadata(&self) -> &Metadata {
        self.metadata.as_ref().unwrap_or_else(|| <Metadata as ::protobuf::Message>::default_instance())
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: Metadata) {
        self.metadata = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut Metadata {
        if self.metadata.is_none() {
            self.metadata.set_default();
        }
        self.metadata.as_mut().unwrap()
    }

    // Take field
    pub fn take_metadata(&mut self) -> Metadata {
        self.metadata.take().unwrap_or_else(|| Metadata::new())
    }

    // repeated .lib.codeintel.lsif_typed.Document document = 2;


    pub fn get_document(&self) -> &[Document] {
        &self.document
    }
    pub fn clear_document(&mut self) {
        self.document.clear();
    }

    // Param is passed by value, moved
    pub fn set_document(&mut self, v: ::protobuf::RepeatedField<Document>) {
        self.document = v;
    }

    // Mutable pointer to the field.
    pub fn mut_document(&mut self) -> &mut ::protobuf::RepeatedField<Document> {
        &mut self.document
    }

    // Take field
    pub fn take_document(&mut self) -> ::protobuf::RepeatedField<Document> {
        ::std::mem::replace(&mut self.document, ::protobuf::RepeatedField::new())
    }

    // repeated .lib.codeintel.lsif_typed.SymbolInformation external_symbols = 3;


    pub fn get_external_symbols(&self) -> &[SymbolInformation] {
        &self.external_symbols
    }
    pub fn clear_external_symbols(&mut self) {
        self.external_symbols.clear();
    }

    // Param is passed by value, moved
    pub fn set_external_symbols(&mut self, v: ::protobuf::RepeatedField<SymbolInformation>) {
        self.external_symbols = v;
    }

    // Mutable pointer to the field.
    pub fn mut_external_symbols(&mut self) -> &mut ::protobuf::RepeatedField<SymbolInformation> {
        &mut self.external_symbols
    }

    // Take field
    pub fn take_external_symbols(&mut self) -> ::protobuf::RepeatedField<SymbolInformation> {
        ::std::mem::replace(&mut self.external_symbols, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Index {
    fn is_initialized(&self) -> bool {
        for v in &self.metadata {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.document {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.external_symbols {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.metadata)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.document)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.external_symbols)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.document {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.external_symbols {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.metadata.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.document {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.external_symbols {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Index {
        Index::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Metadata>>(
                "metadata",
                |m: &Index| { &m.metadata },
                |m: &mut Index| { &mut m.metadata },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Document>>(
                "document",
                |m: &Index| { &m.document },
                |m: &mut Index| { &mut m.document },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SymbolInformation>>(
                "external_symbols",
                |m: &Index| { &m.external_symbols },
                |m: &mut Index| { &mut m.external_symbols },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Index>(
                "Index",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Index {
        static instance: ::protobuf::rt::LazyV2<Index> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Index::new)
    }
}

impl ::protobuf::Clear for Index {
    fn clear(&mut self) {
        self.metadata.clear();
        self.document.clear();
        self.external_symbols.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Index {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Index {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Metadata {
    // message fields
    pub version: ProtocolVersion,
    pub tool_info: ::protobuf::SingularPtrField<ToolInfo>,
    pub project_root: ::std::string::String,
    pub text_document_encoding: TextEncoding,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Metadata {
    fn default() -> &'a Metadata {
        <Metadata as ::protobuf::Message>::default_instance()
    }
}

impl Metadata {
    pub fn new() -> Metadata {
        ::std::default::Default::default()
    }

    // .lib.codeintel.lsif_typed.ProtocolVersion version = 1;


    pub fn get_version(&self) -> ProtocolVersion {
        self.version
    }
    pub fn clear_version(&mut self) {
        self.version = ProtocolVersion::UnspecifiedProtocolVersion;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ProtocolVersion) {
        self.version = v;
    }

    // .lib.codeintel.lsif_typed.ToolInfo tool_info = 2;


    pub fn get_tool_info(&self) -> &ToolInfo {
        self.tool_info.as_ref().unwrap_or_else(|| <ToolInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tool_info(&mut self) {
        self.tool_info.clear();
    }

    pub fn has_tool_info(&self) -> bool {
        self.tool_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tool_info(&mut self, v: ToolInfo) {
        self.tool_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tool_info(&mut self) -> &mut ToolInfo {
        if self.tool_info.is_none() {
            self.tool_info.set_default();
        }
        self.tool_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_tool_info(&mut self) -> ToolInfo {
        self.tool_info.take().unwrap_or_else(|| ToolInfo::new())
    }

    // string project_root = 3;


    pub fn get_project_root(&self) -> &str {
        &self.project_root
    }
    pub fn clear_project_root(&mut self) {
        self.project_root.clear();
    }

    // Param is passed by value, moved
    pub fn set_project_root(&mut self, v: ::std::string::String) {
        self.project_root = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_project_root(&mut self) -> &mut ::std::string::String {
        &mut self.project_root
    }

    // Take field
    pub fn take_project_root(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.project_root, ::std::string::String::new())
    }

    // .lib.codeintel.lsif_typed.TextEncoding text_document_encoding = 4;


    pub fn get_text_document_encoding(&self) -> TextEncoding {
        self.text_document_encoding
    }
    pub fn clear_text_document_encoding(&mut self) {
        self.text_document_encoding = TextEncoding::UnspecifiedTextEncoding;
    }

    // Param is passed by value, moved
    pub fn set_text_document_encoding(&mut self, v: TextEncoding) {
        self.text_document_encoding = v;
    }
}

impl ::protobuf::Message for Metadata {
    fn is_initialized(&self) -> bool {
        for v in &self.tool_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.version, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tool_info)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.project_root)?;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.text_document_encoding, 4, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.version != ProtocolVersion::UnspecifiedProtocolVersion {
            my_size += ::protobuf::rt::enum_size(1, self.version);
        }
        if let Some(ref v) = self.tool_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.project_root.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.project_root);
        }
        if self.text_document_encoding != TextEncoding::UnspecifiedTextEncoding {
            my_size += ::protobuf::rt::enum_size(4, self.text_document_encoding);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.version != ProtocolVersion::UnspecifiedProtocolVersion {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.version))?;
        }
        if let Some(ref v) = self.tool_info.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.project_root.is_empty() {
            os.write_string(3, &self.project_root)?;
        }
        if self.text_document_encoding != TextEncoding::UnspecifiedTextEncoding {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.text_document_encoding))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Metadata {
        Metadata::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ProtocolVersion>>(
                "version",
                |m: &Metadata| { &m.version },
                |m: &mut Metadata| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ToolInfo>>(
                "tool_info",
                |m: &Metadata| { &m.tool_info },
                |m: &mut Metadata| { &mut m.tool_info },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "project_root",
                |m: &Metadata| { &m.project_root },
                |m: &mut Metadata| { &mut m.project_root },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TextEncoding>>(
                "text_document_encoding",
                |m: &Metadata| { &m.text_document_encoding },
                |m: &mut Metadata| { &mut m.text_document_encoding },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Metadata>(
                "Metadata",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Metadata {
        static instance: ::protobuf::rt::LazyV2<Metadata> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Metadata::new)
    }
}

impl ::protobuf::Clear for Metadata {
    fn clear(&mut self) {
        self.version = ProtocolVersion::UnspecifiedProtocolVersion;
        self.tool_info.clear();
        self.project_root.clear();
        self.text_document_encoding = TextEncoding::UnspecifiedTextEncoding;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Metadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Metadata {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ToolInfo {
    // message fields
    pub name: ::std::string::String,
    pub version: ::std::string::String,
    pub arguments: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ToolInfo {
    fn default() -> &'a ToolInfo {
        <ToolInfo as ::protobuf::Message>::default_instance()
    }
}

impl ToolInfo {
    pub fn new() -> ToolInfo {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string version = 2;


    pub fn get_version(&self) -> &str {
        &self.version
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }

    // repeated string arguments = 3;


    pub fn get_arguments(&self) -> &[::std::string::String] {
        &self.arguments
    }
    pub fn clear_arguments(&mut self) {
        self.arguments.clear();
    }

    // Param is passed by value, moved
    pub fn set_arguments(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.arguments = v;
    }

    // Mutable pointer to the field.
    pub fn mut_arguments(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.arguments
    }

    // Take field
    pub fn take_arguments(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.arguments, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ToolInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.arguments)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.version);
        }
        for value in &self.arguments {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.version.is_empty() {
            os.write_string(2, &self.version)?;
        }
        for v in &self.arguments {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ToolInfo {
        ToolInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &ToolInfo| { &m.name },
                |m: &mut ToolInfo| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "version",
                |m: &ToolInfo| { &m.version },
                |m: &mut ToolInfo| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "arguments",
                |m: &ToolInfo| { &m.arguments },
                |m: &mut ToolInfo| { &mut m.arguments },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ToolInfo>(
                "ToolInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ToolInfo {
        static instance: ::protobuf::rt::LazyV2<ToolInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ToolInfo::new)
    }
}

impl ::protobuf::Clear for ToolInfo {
    fn clear(&mut self) {
        self.name.clear();
        self.version.clear();
        self.arguments.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ToolInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ToolInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Document {
    // message fields
    pub relative_path: ::std::string::String,
    pub occurrences: ::protobuf::RepeatedField<Occurrence>,
    pub symbols: ::protobuf::RepeatedField<SymbolInformation>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Document {
    fn default() -> &'a Document {
        <Document as ::protobuf::Message>::default_instance()
    }
}

impl Document {
    pub fn new() -> Document {
        ::std::default::Default::default()
    }

    // string relative_path = 1;


    pub fn get_relative_path(&self) -> &str {
        &self.relative_path
    }
    pub fn clear_relative_path(&mut self) {
        self.relative_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_relative_path(&mut self, v: ::std::string::String) {
        self.relative_path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_relative_path(&mut self) -> &mut ::std::string::String {
        &mut self.relative_path
    }

    // Take field
    pub fn take_relative_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.relative_path, ::std::string::String::new())
    }

    // repeated .lib.codeintel.lsif_typed.Occurrence occurrences = 2;


    pub fn get_occurrences(&self) -> &[Occurrence] {
        &self.occurrences
    }
    pub fn clear_occurrences(&mut self) {
        self.occurrences.clear();
    }

    // Param is passed by value, moved
    pub fn set_occurrences(&mut self, v: ::protobuf::RepeatedField<Occurrence>) {
        self.occurrences = v;
    }

    // Mutable pointer to the field.
    pub fn mut_occurrences(&mut self) -> &mut ::protobuf::RepeatedField<Occurrence> {
        &mut self.occurrences
    }

    // Take field
    pub fn take_occurrences(&mut self) -> ::protobuf::RepeatedField<Occurrence> {
        ::std::mem::replace(&mut self.occurrences, ::protobuf::RepeatedField::new())
    }

    // repeated .lib.codeintel.lsif_typed.SymbolInformation symbols = 3;


    pub fn get_symbols(&self) -> &[SymbolInformation] {
        &self.symbols
    }
    pub fn clear_symbols(&mut self) {
        self.symbols.clear();
    }

    // Param is passed by value, moved
    pub fn set_symbols(&mut self, v: ::protobuf::RepeatedField<SymbolInformation>) {
        self.symbols = v;
    }

    // Mutable pointer to the field.
    pub fn mut_symbols(&mut self) -> &mut ::protobuf::RepeatedField<SymbolInformation> {
        &mut self.symbols
    }

    // Take field
    pub fn take_symbols(&mut self) -> ::protobuf::RepeatedField<SymbolInformation> {
        ::std::mem::replace(&mut self.symbols, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Document {
    fn is_initialized(&self) -> bool {
        for v in &self.occurrences {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.symbols {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.relative_path)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.occurrences)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.symbols)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.relative_path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.relative_path);
        }
        for value in &self.occurrences {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.symbols {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.relative_path.is_empty() {
            os.write_string(1, &self.relative_path)?;
        }
        for v in &self.occurrences {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.symbols {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Document {
        Document::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "relative_path",
                |m: &Document| { &m.relative_path },
                |m: &mut Document| { &mut m.relative_path },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Occurrence>>(
                "occurrences",
                |m: &Document| { &m.occurrences },
                |m: &mut Document| { &mut m.occurrences },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SymbolInformation>>(
                "symbols",
                |m: &Document| { &m.symbols },
                |m: &mut Document| { &mut m.symbols },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Document>(
                "Document",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Document {
        static instance: ::protobuf::rt::LazyV2<Document> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Document::new)
    }
}

impl ::protobuf::Clear for Document {
    fn clear(&mut self) {
        self.relative_path.clear();
        self.occurrences.clear();
        self.symbols.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Document {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Document {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SymbolInformation {
    // message fields
    pub symbol: ::std::string::String,
    pub documentation: ::protobuf::RepeatedField<::std::string::String>,
    pub package: ::std::string::String,
    pub reference_symbols: ::protobuf::RepeatedField<::std::string::String>,
    pub implementation_symbols: ::protobuf::RepeatedField<::std::string::String>,
    pub type_definition_symbols: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SymbolInformation {
    fn default() -> &'a SymbolInformation {
        <SymbolInformation as ::protobuf::Message>::default_instance()
    }
}

impl SymbolInformation {
    pub fn new() -> SymbolInformation {
        ::std::default::Default::default()
    }

    // string symbol = 1;


    pub fn get_symbol(&self) -> &str {
        &self.symbol
    }
    pub fn clear_symbol(&mut self) {
        self.symbol.clear();
    }

    // Param is passed by value, moved
    pub fn set_symbol(&mut self, v: ::std::string::String) {
        self.symbol = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_symbol(&mut self) -> &mut ::std::string::String {
        &mut self.symbol
    }

    // Take field
    pub fn take_symbol(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.symbol, ::std::string::String::new())
    }

    // repeated string documentation = 3;


    pub fn get_documentation(&self) -> &[::std::string::String] {
        &self.documentation
    }
    pub fn clear_documentation(&mut self) {
        self.documentation.clear();
    }

    // Param is passed by value, moved
    pub fn set_documentation(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.documentation = v;
    }

    // Mutable pointer to the field.
    pub fn mut_documentation(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.documentation
    }

    // Take field
    pub fn take_documentation(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.documentation, ::protobuf::RepeatedField::new())
    }

    // string package = 4;


    pub fn get_package(&self) -> &str {
        &self.package
    }
    pub fn clear_package(&mut self) {
        self.package.clear();
    }

    // Param is passed by value, moved
    pub fn set_package(&mut self, v: ::std::string::String) {
        self.package = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_package(&mut self) -> &mut ::std::string::String {
        &mut self.package
    }

    // Take field
    pub fn take_package(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.package, ::std::string::String::new())
    }

    // repeated string reference_symbols = 5;


    pub fn get_reference_symbols(&self) -> &[::std::string::String] {
        &self.reference_symbols
    }
    pub fn clear_reference_symbols(&mut self) {
        self.reference_symbols.clear();
    }

    // Param is passed by value, moved
    pub fn set_reference_symbols(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.reference_symbols = v;
    }

    // Mutable pointer to the field.
    pub fn mut_reference_symbols(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.reference_symbols
    }

    // Take field
    pub fn take_reference_symbols(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.reference_symbols, ::protobuf::RepeatedField::new())
    }

    // repeated string implementation_symbols = 6;


    pub fn get_implementation_symbols(&self) -> &[::std::string::String] {
        &self.implementation_symbols
    }
    pub fn clear_implementation_symbols(&mut self) {
        self.implementation_symbols.clear();
    }

    // Param is passed by value, moved
    pub fn set_implementation_symbols(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.implementation_symbols = v;
    }

    // Mutable pointer to the field.
    pub fn mut_implementation_symbols(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.implementation_symbols
    }

    // Take field
    pub fn take_implementation_symbols(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.implementation_symbols, ::protobuf::RepeatedField::new())
    }

    // repeated string type_definition_symbols = 7;


    pub fn get_type_definition_symbols(&self) -> &[::std::string::String] {
        &self.type_definition_symbols
    }
    pub fn clear_type_definition_symbols(&mut self) {
        self.type_definition_symbols.clear();
    }

    // Param is passed by value, moved
    pub fn set_type_definition_symbols(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.type_definition_symbols = v;
    }

    // Mutable pointer to the field.
    pub fn mut_type_definition_symbols(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.type_definition_symbols
    }

    // Take field
    pub fn take_type_definition_symbols(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.type_definition_symbols, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SymbolInformation {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.symbol)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.documentation)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.package)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.reference_symbols)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.implementation_symbols)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.type_definition_symbols)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.symbol.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.symbol);
        }
        for value in &self.documentation {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        if !self.package.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.package);
        }
        for value in &self.reference_symbols {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        for value in &self.implementation_symbols {
            my_size += ::protobuf::rt::string_size(6, &value);
        };
        for value in &self.type_definition_symbols {
            my_size += ::protobuf::rt::string_size(7, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.symbol.is_empty() {
            os.write_string(1, &self.symbol)?;
        }
        for v in &self.documentation {
            os.write_string(3, &v)?;
        };
        if !self.package.is_empty() {
            os.write_string(4, &self.package)?;
        }
        for v in &self.reference_symbols {
            os.write_string(5, &v)?;
        };
        for v in &self.implementation_symbols {
            os.write_string(6, &v)?;
        };
        for v in &self.type_definition_symbols {
            os.write_string(7, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SymbolInformation {
        SymbolInformation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "symbol",
                |m: &SymbolInformation| { &m.symbol },
                |m: &mut SymbolInformation| { &mut m.symbol },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "documentation",
                |m: &SymbolInformation| { &m.documentation },
                |m: &mut SymbolInformation| { &mut m.documentation },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "package",
                |m: &SymbolInformation| { &m.package },
                |m: &mut SymbolInformation| { &mut m.package },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "reference_symbols",
                |m: &SymbolInformation| { &m.reference_symbols },
                |m: &mut SymbolInformation| { &mut m.reference_symbols },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "implementation_symbols",
                |m: &SymbolInformation| { &m.implementation_symbols },
                |m: &mut SymbolInformation| { &mut m.implementation_symbols },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "type_definition_symbols",
                |m: &SymbolInformation| { &m.type_definition_symbols },
                |m: &mut SymbolInformation| { &mut m.type_definition_symbols },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SymbolInformation>(
                "SymbolInformation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SymbolInformation {
        static instance: ::protobuf::rt::LazyV2<SymbolInformation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SymbolInformation::new)
    }
}

impl ::protobuf::Clear for SymbolInformation {
    fn clear(&mut self) {
        self.symbol.clear();
        self.documentation.clear();
        self.package.clear();
        self.reference_symbols.clear();
        self.implementation_symbols.clear();
        self.type_definition_symbols.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SymbolInformation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SymbolInformation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Occurrence {
    // message fields
    pub range: ::std::vec::Vec<i32>,
    pub symbol: ::std::string::String,
    pub symbol_roles: i32,
    pub override_documentation: ::protobuf::RepeatedField<::std::string::String>,
    pub syntax_kind: SyntaxKind,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Occurrence {
    fn default() -> &'a Occurrence {
        <Occurrence as ::protobuf::Message>::default_instance()
    }
}

impl Occurrence {
    pub fn new() -> Occurrence {
        ::std::default::Default::default()
    }

    // repeated int32 range = 1;


    pub fn get_range(&self) -> &[i32] {
        &self.range
    }
    pub fn clear_range(&mut self) {
        self.range.clear();
    }

    // Param is passed by value, moved
    pub fn set_range(&mut self, v: ::std::vec::Vec<i32>) {
        self.range = v;
    }

    // Mutable pointer to the field.
    pub fn mut_range(&mut self) -> &mut ::std::vec::Vec<i32> {
        &mut self.range
    }

    // Take field
    pub fn take_range(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.range, ::std::vec::Vec::new())
    }

    // string symbol = 2;


    pub fn get_symbol(&self) -> &str {
        &self.symbol
    }
    pub fn clear_symbol(&mut self) {
        self.symbol.clear();
    }

    // Param is passed by value, moved
    pub fn set_symbol(&mut self, v: ::std::string::String) {
        self.symbol = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_symbol(&mut self) -> &mut ::std::string::String {
        &mut self.symbol
    }

    // Take field
    pub fn take_symbol(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.symbol, ::std::string::String::new())
    }

    // int32 symbol_roles = 3;


    pub fn get_symbol_roles(&self) -> i32 {
        self.symbol_roles
    }
    pub fn clear_symbol_roles(&mut self) {
        self.symbol_roles = 0;
    }

    // Param is passed by value, moved
    pub fn set_symbol_roles(&mut self, v: i32) {
        self.symbol_roles = v;
    }

    // repeated string override_documentation = 4;


    pub fn get_override_documentation(&self) -> &[::std::string::String] {
        &self.override_documentation
    }
    pub fn clear_override_documentation(&mut self) {
        self.override_documentation.clear();
    }

    // Param is passed by value, moved
    pub fn set_override_documentation(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.override_documentation = v;
    }

    // Mutable pointer to the field.
    pub fn mut_override_documentation(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.override_documentation
    }

    // Take field
    pub fn take_override_documentation(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.override_documentation, ::protobuf::RepeatedField::new())
    }

    // .lib.codeintel.lsif_typed.SyntaxKind syntax_kind = 5;


    pub fn get_syntax_kind(&self) -> SyntaxKind {
        self.syntax_kind
    }
    pub fn clear_syntax_kind(&mut self) {
        self.syntax_kind = SyntaxKind::UnspecifiedSyntaxKind;
    }

    // Param is passed by value, moved
    pub fn set_syntax_kind(&mut self, v: SyntaxKind) {
        self.syntax_kind = v;
    }
}

impl ::protobuf::Message for Occurrence {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_int32_into(wire_type, is, &mut self.range)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.symbol)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.symbol_roles = tmp;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.override_documentation)?;
                },
                5 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.syntax_kind, 5, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.range {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if !self.symbol.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.symbol);
        }
        if self.symbol_roles != 0 {
            my_size += ::protobuf::rt::value_size(3, self.symbol_roles, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.override_documentation {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        if self.syntax_kind != SyntaxKind::UnspecifiedSyntaxKind {
            my_size += ::protobuf::rt::enum_size(5, self.syntax_kind);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.range {
            os.write_int32(1, *v)?;
        };
        if !self.symbol.is_empty() {
            os.write_string(2, &self.symbol)?;
        }
        if self.symbol_roles != 0 {
            os.write_int32(3, self.symbol_roles)?;
        }
        for v in &self.override_documentation {
            os.write_string(4, &v)?;
        };
        if self.syntax_kind != SyntaxKind::UnspecifiedSyntaxKind {
            os.write_enum(5, ::protobuf::ProtobufEnum::value(&self.syntax_kind))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Occurrence {
        Occurrence::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "range",
                |m: &Occurrence| { &m.range },
                |m: &mut Occurrence| { &mut m.range },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "symbol",
                |m: &Occurrence| { &m.symbol },
                |m: &mut Occurrence| { &mut m.symbol },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "symbol_roles",
                |m: &Occurrence| { &m.symbol_roles },
                |m: &mut Occurrence| { &mut m.symbol_roles },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "override_documentation",
                |m: &Occurrence| { &m.override_documentation },
                |m: &mut Occurrence| { &mut m.override_documentation },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<SyntaxKind>>(
                "syntax_kind",
                |m: &Occurrence| { &m.syntax_kind },
                |m: &mut Occurrence| { &mut m.syntax_kind },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Occurrence>(
                "Occurrence",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Occurrence {
        static instance: ::protobuf::rt::LazyV2<Occurrence> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Occurrence::new)
    }
}

impl ::protobuf::Clear for Occurrence {
    fn clear(&mut self) {
        self.range.clear();
        self.symbol.clear();
        self.symbol_roles = 0;
        self.override_documentation.clear();
        self.syntax_kind = SyntaxKind::UnspecifiedSyntaxKind;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Occurrence {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Occurrence {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ProtocolVersion {
    UnspecifiedProtocolVersion = 0,
}

impl ::protobuf::ProtobufEnum for ProtocolVersion {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ProtocolVersion> {
        match value {
            0 => ::std::option::Option::Some(ProtocolVersion::UnspecifiedProtocolVersion),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ProtocolVersion] = &[
            ProtocolVersion::UnspecifiedProtocolVersion,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ProtocolVersion>("ProtocolVersion", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ProtocolVersion {
}

impl ::std::default::Default for ProtocolVersion {
    fn default() -> Self {
        ProtocolVersion::UnspecifiedProtocolVersion
    }
}

impl ::protobuf::reflect::ProtobufValue for ProtocolVersion {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TextEncoding {
    UnspecifiedTextEncoding = 0,
    UTF8 = 1,
    UTF16 = 2,
}

impl ::protobuf::ProtobufEnum for TextEncoding {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TextEncoding> {
        match value {
            0 => ::std::option::Option::Some(TextEncoding::UnspecifiedTextEncoding),
            1 => ::std::option::Option::Some(TextEncoding::UTF8),
            2 => ::std::option::Option::Some(TextEncoding::UTF16),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TextEncoding] = &[
            TextEncoding::UnspecifiedTextEncoding,
            TextEncoding::UTF8,
            TextEncoding::UTF16,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<TextEncoding>("TextEncoding", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for TextEncoding {
}

impl ::std::default::Default for TextEncoding {
    fn default() -> Self {
        TextEncoding::UnspecifiedTextEncoding
    }
}

impl ::protobuf::reflect::ProtobufValue for TextEncoding {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum SymbolRole {
    UnspecifiedSymbolRole = 0,
    Definition = 1,
    Import = 2,
    WriteAccess = 4,
    ReadAccess = 8,
    Generated = 16,
    Test = 32,
}

impl ::protobuf::ProtobufEnum for SymbolRole {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SymbolRole> {
        match value {
            0 => ::std::option::Option::Some(SymbolRole::UnspecifiedSymbolRole),
            1 => ::std::option::Option::Some(SymbolRole::Definition),
            2 => ::std::option::Option::Some(SymbolRole::Import),
            4 => ::std::option::Option::Some(SymbolRole::WriteAccess),
            8 => ::std::option::Option::Some(SymbolRole::ReadAccess),
            16 => ::std::option::Option::Some(SymbolRole::Generated),
            32 => ::std::option::Option::Some(SymbolRole::Test),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [SymbolRole] = &[
            SymbolRole::UnspecifiedSymbolRole,
            SymbolRole::Definition,
            SymbolRole::Import,
            SymbolRole::WriteAccess,
            SymbolRole::ReadAccess,
            SymbolRole::Generated,
            SymbolRole::Test,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<SymbolRole>("SymbolRole", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for SymbolRole {
}

impl ::std::default::Default for SymbolRole {
    fn default() -> Self {
        SymbolRole::UnspecifiedSymbolRole
    }
}

impl ::protobuf::reflect::ProtobufValue for SymbolRole {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum SyntaxKind {
  UnspecifiedSyntaxKind = 0,

  // `+`, `*`, etc.
  Operator = 1,

  // Comment, including comment markers and text
  Comment = 2,

  // `;` `.` `,`
  PunctuationDelimiter = 3,
  // (), {}, [] when used syntactically
  PunctuationBracket = 4,
  // `{}` within a string.
  PunctuationSpecial = 5,

  // `if`, `else`, `return`, `class`, etc.
  Keyword = 6,

  // non-specific variables, function calls, etc.
  // In general, prefer more specific identifier kinds if possible.
  Identifier = 7,
  // Identifiers builtin to the language: `min`, `print` in Python.
  BuiltinIdentifier = 8,
  // Identifiers builtin to the language: `None` in Python, `nil` in Go.
  NullIdentifier = 9,
  // `xyz` in `const xyz = "hello"`
  ConstantIdentifier = 10,
  // `var X = "hello"` in Go
  MutableGlobalIdentifier = 11,
  // both parameter definition and references
  ParameterIdentifier = 12,
  // identifiers for variable definitions and references within a local scope
  LocalIdentifier = 13,
  // Used when identifier shadowes some other identifier within the scope
  ShadowedIdentifier = 14,
  // `package main`
  ModuleIdentifier = 15,
  // Macro references only, not definitions
  MacroIdentifier = 16,

  // Literal strings: "Hello, world!"
  StringLiteral = 17,
  // ".*" in a string regex
  StringLiteralRegex = 18,
  // "\t", "\n"
  StringLiteralEscape = 19,
  // datetimes within strings, special words within a string
  StringLiteralSpecial = 20,
  // "key" in { "key": "value" }
  StringLiteralKey = 21,
  // 'c' or similar, in languages that differentiate strings and characters
  CharacterLiteral = 22,
  // Literal numbers, both floats and integers
  NumericLiteral = 23,
  // `true`, `false`
  BooleanLiteral = 24,

  // Function definition only.
  //    Included because many editors highlight a function definition differently
  //    from function calls.
  FunctionDefinition = 25,
  // Macro definition only.
  //    Included because many editors highlight a macro definition differently
  //    from macro usages.
  MacroDefinition = 26,

  // non-builtin types, including namespaces
  TypeIdentifier = 27,
  // builtin types only, such as `str` for Python or `int` in Go
  BuiltinTypeIdentifier = 28,

  // Python decorators, c-like __attribute__
  AttributeIdentifier = 29,

  // Used for XML-like tags
  Tag = 30,
  // Attribute name in XML-like tags
  TagAttribute = 31,
  // Delimiters for XML-like tags
  TagDelimiter = 32
}

impl ::protobuf::ProtobufEnum for SyntaxKind {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SyntaxKind> {
        match value {
            0 => ::std::option::Option::Some(SyntaxKind::UnspecifiedSyntaxKind),
            1 => ::std::option::Option::Some(SyntaxKind::StringLiteral),
            2 => ::std::option::Option::Some(SyntaxKind::NumericLiteral),
            3 => ::std::option::Option::Some(SyntaxKind::Identifier),
            5 => ::std::option::Option::Some(SyntaxKind::TypeIdentifier),
            7 => ::std::option::Option::Some(SyntaxKind::LocalIdentifier),
            8 => ::std::option::Option::Some(SyntaxKind::ShadowedIdentifier),
            9 => ::std::option::Option::Some(SyntaxKind::ModuleIdentifier),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [SyntaxKind] = &[
            SyntaxKind::UnspecifiedSyntaxKind,
            SyntaxKind::StringLiteral,
            SyntaxKind::NumericLiteral,
            SyntaxKind::Identifier,
            SyntaxKind::TypeIdentifier,
            SyntaxKind::LocalIdentifier,
            SyntaxKind::ShadowedIdentifier,
            SyntaxKind::ModuleIdentifier,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<SyntaxKind>("SyntaxKind", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for SyntaxKind {
}

impl ::std::default::Default for SyntaxKind {
    fn default() -> Self {
        SyntaxKind::UnspecifiedSyntaxKind
    }
}

impl ::protobuf::reflect::ProtobufValue for SyntaxKind {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n#lib/codeintel/lsif_typed/lsif.proto\x12\x18lib.codeintel.lsif_typed\"\
    \xdf\x01\n\x05Index\x12>\n\x08metadata\x18\x01\x20\x01(\x0b2\".lib.codei\
    ntel.lsif_typed.MetadataR\x08metadata\x12>\n\x08document\x18\x02\x20\x03\
    (\x0b2\".lib.codeintel.lsif_typed.DocumentR\x08document\x12V\n\x10extern\
    al_symbols\x18\x03\x20\x03(\x0b2+.lib.codeintel.lsif_typed.SymbolInforma\
    tionR\x0fexternalSymbols\"\x91\x02\n\x08Metadata\x12C\n\x07version\x18\
    \x01\x20\x01(\x0e2).lib.codeintel.lsif_typed.ProtocolVersionR\x07version\
    \x12?\n\ttool_info\x18\x02\x20\x01(\x0b2\".lib.codeintel.lsif_typed.Tool\
    InfoR\x08toolInfo\x12!\n\x0cproject_root\x18\x03\x20\x01(\tR\x0bprojectR\
    oot\x12\\\n\x16text_document_encoding\x18\x04\x20\x01(\x0e2&.lib.codeint\
    el.lsif_typed.TextEncodingR\x14textDocumentEncoding\"V\n\x08ToolInfo\x12\
    \x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x18\n\x07version\x18\x02\
    \x20\x01(\tR\x07version\x12\x1c\n\targuments\x18\x03\x20\x03(\tR\targume\
    nts\"\xbe\x01\n\x08Document\x12#\n\rrelative_path\x18\x01\x20\x01(\tR\
    \x0crelativePath\x12F\n\x0boccurrences\x18\x02\x20\x03(\x0b2$.lib.codein\
    tel.lsif_typed.OccurrenceR\x0boccurrences\x12E\n\x07symbols\x18\x03\x20\
    \x03(\x0b2+.lib.codeintel.lsif_typed.SymbolInformationR\x07symbols\"\x87\
    \x02\n\x11SymbolInformation\x12\x16\n\x06symbol\x18\x01\x20\x01(\tR\x06s\
    ymbol\x12$\n\rdocumentation\x18\x03\x20\x03(\tR\rdocumentation\x12\x18\n\
    \x07package\x18\x04\x20\x01(\tR\x07package\x12+\n\x11reference_symbols\
    \x18\x05\x20\x03(\tR\x10referenceSymbols\x125\n\x16implementation_symbol\
    s\x18\x06\x20\x03(\tR\x15implementationSymbols\x126\n\x17type_definition\
    _symbols\x18\x07\x20\x03(\tR\x15typeDefinitionSymbols\"\xdb\x01\n\nOccur\
    rence\x12\x14\n\x05range\x18\x01\x20\x03(\x05R\x05range\x12\x16\n\x06sym\
    bol\x18\x02\x20\x01(\tR\x06symbol\x12!\n\x0csymbol_roles\x18\x03\x20\x01\
    (\x05R\x0bsymbolRoles\x125\n\x16override_documentation\x18\x04\x20\x03(\
    \tR\x15overrideDocumentation\x12E\n\x0bsyntax_kind\x18\x05\x20\x01(\x0e2\
    $.lib.codeintel.lsif_typed.SyntaxKindR\nsyntaxKind*1\n\x0fProtocolVersio\
    n\x12\x1e\n\x1aUnspecifiedProtocolVersion\x10\0*@\n\x0cTextEncoding\x12\
    \x1b\n\x17UnspecifiedTextEncoding\x10\0\x12\x08\n\x04UTF8\x10\x01\x12\t\
    \n\x05UTF16\x10\x02*}\n\nSymbolRole\x12\x19\n\x15UnspecifiedSymbolRole\
    \x10\0\x12\x0e\n\nDefinition\x10\x01\x12\n\n\x06Import\x10\x02\x12\x0f\n\
    \x0bWriteAccess\x10\x04\x12\x0e\n\nReadAccess\x10\x08\x12\r\n\tGenerated\
    \x10\x10\x12\x08\n\x04Test\x10\x20*\xde\x01\n\nSyntaxKind\x12\x19\n\x15U\
    nspecifiedSyntaxKind\x10\0\x12\x11\n\rStringLiteral\x10\x01\x12\x12\n\
    \x0eNumericLiteral\x10\x02\x12\x0e\n\nIdentifier\x10\x03\x12\x14\n\x10Me\
    thodIdentifier\x10\x04\x12\x12\n\x0eTypeIdentifier\x10\x05\x12\x12\n\x0e\
    TermIdentifier\x10\x06\x12\x13\n\x0fLocalIdentifier\x10\x07\x12\x14\n\
    \x10ShadowedIdentifier\x10\x08\x12\x15\n\x11ModuleIdentifier\x10\tB>Z<git\
    hub.com/sourcegraph/sourcegraph/lib/codeintel/lsif_typed/J\xc4P\n\x07\
    \x12\x05\n\0\xd4\x01\x01\n\x82\x04\n\x01\x0c\x12\x03\n\0\x122\xf7\x03\
    \x20An\x20index\x20contains\x20one\x20or\x20more\x20pieces\x20of\x20info\
    rmation\x20about\x20a\x20given\x20piece\x20of\n\x20source\x20code\x20or\
    \x20software\x20artifact.\x20Complementary\x20information\x20can\x20be\
    \x20merged\n\x20together\x20from\x20multiple\x20sources\x20to\x20provide\
    \x20a\x20unified\x20code\x20intelligence\n\x20experience.\n\n\x20Program\
    s\x20producing\x20a\x20file\x20of\x20this\x20format\x20is\x20an\x20\"ind\
    exer\"\x20and\x20may\x20operate\n\x20somewhere\x20on\x20the\x20spectrum\
    \x20between\x20precision,\x20such\x20as\x20indexes\x20produced\x20by\n\
    \x20compiler-backed\x20indexers,\x20and\x20heurstics,\x20such\x20as\x20i\
    ndexes\x20produced\x20by\x20local\n\x20syntax-directed\x20analysis\x20fo\
    r\x20scope\x20rules.\n\n\x08\n\x01\x02\x12\x03\x0c\0!\n\x08\n\x01\x08\
    \x12\x03\x0e\0S\n\t\n\x02\x08\x0b\x12\x03\x0e\0S\n\xd1\x03\n\x02\x04\0\
    \x12\x04\x16\0\x1d\x01\x1a\xc4\x03\x20Index\x20represents\x20a\x20comple\
    te\x20LSIF\x20index\x20for\x20a\x20workspace\x20this\x20is\x20rooted\x20\
    at\x20a\n\x20single\x20directory.\x20An\x20Index\x20message\x20payload\
    \x20can\x20have\x20a\x20large\x20memory\x20footprint\n\x20and\x20it's\
    \x20therefore\x20recommended\x20to\x20emit\x20and\x20consume\x20an\x20In\
    dex\x20payload\x20one\x20field\n\x20value\x20at\x20a\x20time.\x20\x20To\
    \x20permit\x20streaming\x20consumption\x20of\x20an\x20Index\x20payload,\
    \x20the\n\x20`metadata`\x20field\x20must\x20appear\x20at\x20the\x20start\
    \x20of\x20the\x20stream\x20and\x20must\x20only\x20appear\n\x20once\x20in\
    \x20the\x20stream.\x20Other\x20field\x20values\x20may\x20appear\x20in\
    \x20any\x20order.\n\n\n\n\x03\x04\0\x01\x12\x03\x16\x08\r\n)\n\x04\x04\0\
    \x02\0\x12\x03\x18\x02\x18\x1a\x1c\x20Metadata\x20about\x20this\x20index\
    .\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x18\x02\n\n\x0c\n\x05\x04\0\x02\
    \0\x01\x12\x03\x18\x0b\x13\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x18\x16\
    \x17\n3\n\x04\x04\0\x02\x01\x12\x03\x1a\x02!\x1a&\x20Documents\x20that\
    \x20belong\x20to\x20this\x20index.\n\n\x0c\n\x05\x04\0\x02\x01\x04\x12\
    \x03\x1a\x02\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x1a\x0b\x13\n\x0c\n\
    \x05\x04\0\x02\x01\x01\x12\x03\x1a\x14\x1c\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\x1a\x1f\x20\nY\n\x04\x04\0\x02\x02\x12\x03\x1c\x022\x1aL\x20Sym\
    bols\x20that\x20are\x20referenced\x20from\x20this\x20index\x20and\x20not\
    \x20defined\x20in\x20this\x20index.\n\n\x0c\n\x05\x04\0\x02\x02\x04\x12\
    \x03\x1c\x02\n\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x1c\x0b\x1c\n\x0c\n\
    \x05\x04\0\x02\x02\x01\x12\x03\x1c\x1d-\n\x0c\n\x05\x04\0\x02\x02\x03\
    \x12\x03\x1c01\n\n\n\x02\x04\x01\x12\x04\x1f\0+\x01\n\n\n\x03\x04\x01\
    \x01\x12\x03\x1f\x08\x10\nN\n\x04\x04\x01\x02\0\x12\x03!\x02\x1e\x1aA\
    \x20Which\x20version\x20of\x20this\x20protocol\x20was\x20used\x20to\x20g\
    enerate\x20this\x20index?\n\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03!\x02\
    \x11\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03!\x12\x19\n\x0c\n\x05\x04\x01\
    \x02\0\x03\x12\x03!\x1c\x1d\nC\n\x04\x04\x01\x02\x01\x12\x03#\x02\x19\
    \x1a6\x20Information\x20about\x20the\x20tool\x20that\x20produced\x20this\
    \x20index.\n\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03#\x02\n\n\x0c\n\x05\
    \x04\x01\x02\x01\x01\x12\x03#\x0b\x14\n\x0c\n\x05\x04\x01\x02\x01\x03\
    \x12\x03#\x17\x18\n\xa2\x01\n\x04\x04\x01\x02\x02\x12\x03'\x02\x1a\x1a\
    \x94\x01\x20URI-encoded\x20absolute\x20path\x20to\x20the\x20root\x20dire\
    ctory\x20of\x20this\x20index.\x20All\n\x20documents\x20in\x20this\x20ind\
    ex\x20must\x20appear\x20in\x20a\x20subdirectory\x20of\x20this\x20root\n\
    \x20directory.\n\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03'\x02\x08\n\x0c\
    \n\x05\x04\x01\x02\x02\x01\x12\x03'\t\x15\n\x0c\n\x05\x04\x01\x02\x02\
    \x03\x12\x03'\x18\x19\nl\n\x04\x04\x01\x02\x03\x12\x03*\x02*\x1a_\x20Tex\
    t\x20encoding\x20of\x20the\x20source\x20files\x20on\x20disk\x20that\x20a\
    re\x20referenced\x20from\n\x20`Document.relative_path`.\n\n\x0c\n\x05\
    \x04\x01\x02\x03\x06\x12\x03*\x02\x0e\n\x0c\n\x05\x04\x01\x02\x03\x01\
    \x12\x03*\x0f%\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03*()\n\n\n\x02\x05\
    \0\x12\x04-\0/\x01\n\n\n\x03\x05\0\x01\x12\x03-\x05\x14\n\x0b\n\x04\x05\
    \0\x02\0\x12\x03.\x04#\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03.\x04\x1e\n\
    \x0c\n\x05\x05\0\x02\0\x02\x12\x03.!\"\n\n\n\x02\x05\x01\x12\x041\05\x01\
    \n\n\n\x03\x05\x01\x01\x12\x031\x05\x11\n\x0b\n\x04\x05\x01\x02\0\x12\
    \x032\x02\x1e\n\x0c\n\x05\x05\x01\x02\0\x01\x12\x032\x02\x19\n\x0c\n\x05\
    \x05\x01\x02\0\x02\x12\x032\x1c\x1d\n\x0b\n\x04\x05\x01\x02\x01\x12\x033\
    \x02\x0b\n\x0c\n\x05\x05\x01\x02\x01\x01\x12\x033\x02\x06\n\x0c\n\x05\
    \x05\x01\x02\x01\x02\x12\x033\t\n\n\x0b\n\x04\x05\x01\x02\x02\x12\x034\
    \x02\x0c\n\x0c\n\x05\x05\x01\x02\x02\x01\x12\x034\x02\x07\n\x0c\n\x05\
    \x05\x01\x02\x02\x02\x12\x034\n\x0b\n\n\n\x02\x04\x02\x12\x047\0>\x01\n\
    \n\n\x03\x04\x02\x01\x12\x037\x08\x10\n<\n\x04\x04\x02\x02\0\x12\x039\
    \x02\x12\x1a/\x20Name\x20of\x20the\x20indexer\x20that\x20produced\x20thi\
    s\x20index.\n\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x039\x02\x08\n\x0c\n\x05\
    \x04\x02\x02\0\x01\x12\x039\t\r\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x039\
    \x10\x11\n?\n\x04\x04\x02\x02\x01\x12\x03;\x02\x15\x1a2\x20Version\x20of\
    \x20the\x20indexer\x20that\x20produced\x20this\x20index.\n\n\x0c\n\x05\
    \x04\x02\x02\x01\x05\x12\x03;\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\x01\
    \x12\x03;\t\x10\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03;\x13\x14\nL\n\
    \x04\x04\x02\x02\x02\x12\x03=\x02\x20\x1a?\x20Command-line\x20arguments\
    \x20that\x20were\x20used\x20to\x20invoke\x20this\x20indexer.\n\n\x0c\n\
    \x05\x04\x02\x02\x02\x04\x12\x03=\x02\n\n\x0c\n\x05\x04\x02\x02\x02\x05\
    \x12\x03=\x0b\x11\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03=\x12\x1b\n\x0c\
    \n\x05\x04\x02\x02\x02\x03\x12\x03=\x1e\x1f\nH\n\x02\x04\x03\x12\x04A\0J\
    \x01\x1a<\x20Document\x20defines\x20the\x20metadata\x20about\x20a\x20sou\
    rce\x20file\x20on\x20disk.\n\n\n\n\x03\x04\x03\x01\x12\x03A\x08\x10\n\
    \xcd\x01\n\x04\x04\x03\x02\0\x12\x03E\x02\x1b\x1a\xbf\x01\x20(Required)\
    \x20Path\x20to\x20the\x20text\x20document\x20relative\x20to\x20the\x20di\
    rectory\x20supplied\x20in\n\x20the\x20associated\x20`Metadata.project_ro\
    ot`.\x20Not\x20URI-encoded.\x20This\x20value\x20should\n\x20not\x20begin\
    \x20with\x20a\x20directory\x20separator.\n\n\x0c\n\x05\x04\x03\x02\0\x05\
    \x12\x03E\x02\x08\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03E\t\x16\n\x0c\n\
    \x05\x04\x03\x02\0\x03\x12\x03E\x19\x1a\n4\n\x04\x04\x03\x02\x01\x12\x03\
    G\x02&\x1a'\x20Occurrences\x20that\x20appear\x20in\x20this\x20file.\n\n\
    \x0c\n\x05\x04\x03\x02\x01\x04\x12\x03G\x02\n\n\x0c\n\x05\x04\x03\x02\
    \x01\x06\x12\x03G\x0b\x15\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03G\x16!\
    \n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03G$%\n=\n\x04\x04\x03\x02\x02\x12\
    \x03I\x02)\x1a0\x20Symbols\x20that\x20are\x20defined\x20within\x20this\
    \x20document.\n\n\x0c\n\x05\x04\x03\x02\x02\x04\x12\x03I\x02\n\n\x0c\n\
    \x05\x04\x03\x02\x02\x06\x12\x03I\x0b\x1c\n\x0c\n\x05\x04\x03\x02\x02\
    \x01\x12\x03I\x1d$\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03I'(\n\x82\x01\
    \n\x02\x04\x04\x12\x05N\0\x8c\x01\x01\x1au\x20SymbolInformation\x20defin\
    es\x20metadata\x20about\x20a\x20symbol,\x20such\x20as\x20the\x20symbol's\
    \n\x20docstring\x20or\x20what\x20package\x20it's\x20defined\x20it.\n\n\n\
    \n\x03\x04\x04\x01\x12\x03N\x08\x19\n\xe8\x05\n\x04\x04\x04\x02\0\x12\
    \x03[\x02\x14\x1a\xda\x05\x20Identifier\x20of\x20this\x20symbol,\x20whic\
    h\x20can\x20be\x20referenced\x20from\x20`Occurence.symbol`.\n\x20The\x20\
    string\x20must\x20be\x20formatted\x20as\x20`\"$SCHEME:$ID`\x20where:\n\n\
    \x20-\x20`SCHEME`:\x20the\x20value\x20`local`\x20for\x20document-local\
    \x20symbols\x20or\x20an\n\x20\x20\x20indexer-specific\x20identifier\x20f\
    or\x20global\x20symbols.\x20\x20Document-local\x20symbols\n\x20\x20\x20a\
    re\x20symbols\x20that\x20cannot\x20be\x20referenced\x20outside\x20the\
    \x20document,\x20for\x20example\n\x20\x20\x20local\x20variables.\n\x20-\
    \x20`ID`:\x20an\x20opaque\x20identifier\x20that\x20uniquely\x20determine\
    s\x20this\x20symbol\x20within\n\x20\x20\x20the\x20defined\x20scheme.\x20\
    For\x20global\x20symbols,\x20the\x20ID\x20must\x20be\x20stable\x20betwee\
    n\n\x20\x20\x20different\x20invocations\x20of\x20the\x20indexer\x20again\
    st\x20unchanged\x20code.\x20\x20For\n\x20\x20\x20document-local\x20symbo\
    ls,\x20any\x20string\x20value\x20that\x20uniquely\x20identifies\x20the\n\
    \x20\x20\x20symbol\x20within\x20the\x20document\x20it\x20belong\x20to\
    \x20(ideally\x20stable\x20between\x20runs).\n\n\x0c\n\x05\x04\x04\x02\0\
    \x05\x12\x03[\x02\x08\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03[\t\x0f\n\x0c\
    \n\x05\x04\x04\x02\0\x03\x12\x03[\x12\x13\n\xb5\x02\n\x04\x04\x04\x02\
    \x01\x12\x03`\x02$\x1a\xa7\x02\x20(optional,\x20but\x20strongly\x20recom\
    mended)\x20The\x20markdown-formatted\x20documentation\n\x20for\x20this\
    \x20symbol.\x20This\x20field\x20is\x20repeated\x20to\x20allow\x20differe\
    nt\x20kinds\x20of\n\x20documentation.\x20\x20For\x20example,\x20it's\x20\
    nice\x20to\x20include\x20both\x20the\x20signature\x20of\x20a\n\x20method\
    \x20(parameters\x20and\x20return\x20type)\x20along\x20with\x20the\x20acc\
    ompanying\x20docstring.\n\n\x0c\n\x05\x04\x04\x02\x01\x04\x12\x03`\x02\n\
    \n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03`\x0b\x11\n\x0c\n\x05\x04\x04\
    \x02\x01\x01\x12\x03`\x12\x1f\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03`\"\
    #\n\x9a\x03\n\x04\x04\x04\x02\x02\x12\x03g\x02\x15\x1a\x8c\x03\x20(optio\
    nal)\x20To\x20enable\x20cross-index\x20navigation,\x20specify\x20which\
    \x20package\x20this\n\x20symbol\x20is\x20defined\x20in.\x20A\x20package\
    \x20must\x20be\x20encoded\x20as\x20a\x20space-separated\x20string\n\x20w\
    ith\x20the\x20value\x20`\"$manager\x20$name\x20$version\"`\x20where:\n\
    \x20-\x20`$manager`\x20is\x20the\x20name\x20of\x20the\x20package\x20mana\
    ger,\x20for\x20example\x20`npm`.\n\x20-\x20`$name`\x20is\x20the\x20name\
    \x20of\x20the\x20package,\x20for\x20example\x20`react`.\n\x20-\x20`$vers\
    ion`\x20is\x20the\x20version\x20of\x20the\x20package,\x20for\x20example\
    \x20`1.2.0`.\n\n\x0c\n\x05\x04\x04\x02\x02\x05\x12\x03g\x02\x08\n\x0c\n\
    \x05\x04\x04\x02\x02\x01\x12\x03g\t\x10\n\x0c\n\x05\x04\x04\x02\x02\x03\
    \x12\x03g\x13\x14\n\x9a\x08\n\x04\x04\x04\x02\x03\x12\x04\x80\x01\x02(\
    \x1a\x8b\x08\x20(optional)\x20When\x20resolving\x20\"Find\x20references\
    \",\x20this\x20field\x20documents\x20what\n\x20other\x20symbols\x20shoul\
    d\x20be\x20included\x20together\x20with\x20this\x20symbol.\x20For\x20exa\
    mple,\n\x20consider\x20the\x20following\x20TypeScript\x20code\x20that\
    \x20defines\x20two\x20symbols\n\x20`Animal#sound()`\x20and\x20`Dog#sound\
    ()`:\n\x20```ts\n\x20interface\x20Animal\x20{\n\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20^^^^^^\x20definition\x20Animal#\n\x20\x20\x20sound()\
    :\x20string\n\x20\x20\x20^^^^^\x20definition\x20Animal#sound()\n\x20}\n\
    \x20class\x20Dog\x20implements\x20Animal\x20{\n\x20\x20\x20\x20\x20\x20\
    \x20^^^\x20definition\x20Dog#,\x20implementation_symbols\x20=\x20Animal#\
    \n\x20\x20\x20public\x20sound():\x20string\x20{\x20return\x20\"woof\"\
    \x20}\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20^^^^^\x20definition\x20Do\
    g#sound(),\x20references_symbols\x20=\x20Animal#sound(),\x20implementati\
    on_symbols\x20=\x20Animal#sound()\n\x20}\n\x20const\x20animal:\x20Animal\
    \x20=\x20new\x20Dog()\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20^^^^^^\x20reference\x20Animal#\n\x20console.log(animal.sound\
    ())\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20^^^^^\x20reference\x20Animal#sound()\n\x20```\n\x20Doing\
    \x20\"Find\x20references\"\x20on\x20the\x20symbol\x20`Animal#sound()`\
    \x20should\x20return\n\x20references\x20to\x20the\x20`Dog#sound()`\x20me\
    thod\x20as\x20well.\x20Vice-versa,\x20doing\x20\"Find\n\x20references\"\
    \x20on\x20the\x20`Dog#sound()`\x20method\x20should\x20include\x20referen\
    ces\x20to\x20the\n\x20`Animal#sound()`\x20method\x20as\x20well.\n\n\r\n\
    \x05\x04\x04\x02\x03\x04\x12\x04\x80\x01\x02\n\n\r\n\x05\x04\x04\x02\x03\
    \x05\x12\x04\x80\x01\x0b\x11\n\r\n\x05\x04\x04\x02\x03\x01\x12\x04\x80\
    \x01\x12#\n\r\n\x05\x04\x04\x02\x03\x03\x12\x04\x80\x01&'\n\xc5\x04\n\
    \x04\x04\x04\x02\x04\x12\x04\x89\x01\x02-\x1a\xb6\x04\x20(optional)\x20S\
    imilar\x20to\x20`references_symbols`\x20but\x20for\x20\"Go\x20to\x20impl\
    ementation\".\n\x20It's\x20common\x20for\x20the\x20`implementation_symbo\
    ls`\x20and\x20`references_symbols`\x20fields\n\x20have\x20the\x20same\
    \x20values\x20but\x20that's\x20not\x20always\x20the\x20case.\n\x20In\x20\
    the\x20TypeScript\x20example\x20above,\x20observe\x20that\x20`implementa\
    tion_symbols`\x20has\n\x20the\x20value\x20`\"Animal#\"`\x20for\x20the\
    \x20\"Dog#\"\x20symbol\x20while\x20`references_symbols`\x20is\n\x20empty\
    .\x20When\x20requesting\x20\"Find\x20references\"\x20on\x20the\x20\"Anim\
    al#\"\x20symbol\x20we\x20don't\n\x20want\x20to\x20include\x20references\
    \x20to\x20\"Dog#\"\x20even\x20if\x20\"Go\x20to\x20implementation\"\x20on\
    \x20the\n\x20\"Animal#\"\x20symbol\x20should\x20navigate\x20to\x20the\
    \x20\"Dog#\"\x20symbol.\n\n\r\n\x05\x04\x04\x02\x04\x04\x12\x04\x89\x01\
    \x02\n\n\r\n\x05\x04\x04\x02\x04\x05\x12\x04\x89\x01\x0b\x11\n\r\n\x05\
    \x04\x04\x02\x04\x01\x12\x04\x89\x01\x12(\n\r\n\x05\x04\x04\x02\x04\x03\
    \x12\x04\x89\x01+,\n[\n\x04\x04\x04\x02\x05\x12\x04\x8b\x01\x02.\x1aM\
    \x20(optional)\x20Similar\x20to\x20`references_symbols`\x20but\x20for\
    \x20\"Go\x20to\x20type\x20definition\".\n\n\r\n\x05\x04\x04\x02\x05\x04\
    \x12\x04\x8b\x01\x02\n\n\r\n\x05\x04\x04\x02\x05\x05\x12\x04\x8b\x01\x0b\
    \x11\n\r\n\x05\x04\x04\x02\x05\x01\x12\x04\x8b\x01\x12)\n\r\n\x05\x04\
    \x04\x02\x05\x03\x12\x04\x8b\x01,-\n\x8a\x03\n\x02\x05\x02\x12\x06\x93\
    \x01\0\xa1\x01\x01\x1a\xfb\x02\x20SymbolRole\x20declares\x20what\x20\"ro\
    le\"\x20a\x20symbol\x20has\x20in\x20an\x20occurrence.\x20\x20A\x20role\
    \x20is\n\x20encoded\x20as\x20a\x20bitmask\x20where\x20each\x20bit\x20rep\
    resents\x20a\x20different\x20role.\x20For\x20example,\n\x20to\x20determi\
    ne\x20if\x20the\x20`Import`\x20role\x20is\x20set\x20test\x20whether\x20t\
    he\x20second\x20bit\x20of\x20the\n\x20enum\x20value\x20is\x20defined.\
    \x20In\x20psuedo-code,\x20this\x20can\x20be\x20implemented\x20with\x20th\
    e\n\x20logic:\x20`const\x20isImportRole\x20=\x20(role.value\x20&\x20Symb\
    olRole.Import.value)\x20>\x200`.\n\n\x0b\n\x03\x05\x02\x01\x12\x04\x93\
    \x01\x05\x0f\n\x0c\n\x04\x05\x02\x02\0\x12\x04\x94\x01\x02\x1c\n\r\n\x05\
    \x05\x02\x02\0\x01\x12\x04\x94\x01\x02\x17\n\r\n\x05\x05\x02\x02\0\x02\
    \x12\x04\x94\x01\x1a\x1b\nT\n\x04\x05\x02\x02\x01\x12\x04\x96\x01\x02\
    \x13\x1aF\x20Is\x20the\x20symbol\x20defined\x20here?\x20If\x20not,\x20th\
    en\x20this\x20is\x20a\x20symbol\x20reference.\n\n\r\n\x05\x05\x02\x02\
    \x01\x01\x12\x04\x96\x01\x02\x0c\n\r\n\x05\x05\x02\x02\x01\x02\x12\x04\
    \x96\x01\x0f\x12\n,\n\x04\x05\x02\x02\x02\x12\x04\x98\x01\x02\x0f\x1a\
    \x1e\x20Is\x20the\x20symbol\x20imported\x20here?\n\n\r\n\x05\x05\x02\x02\
    \x02\x01\x12\x04\x98\x01\x02\x08\n\r\n\x05\x05\x02\x02\x02\x02\x12\x04\
    \x98\x01\x0b\x0e\n+\n\x04\x05\x02\x02\x03\x12\x04\x9a\x01\x02\x14\x1a\
    \x1d\x20Is\x20the\x20symbol\x20written\x20here?\n\n\r\n\x05\x05\x02\x02\
    \x03\x01\x12\x04\x9a\x01\x02\r\n\r\n\x05\x05\x02\x02\x03\x02\x12\x04\x9a\
    \x01\x10\x13\n(\n\x04\x05\x02\x02\x04\x12\x04\x9c\x01\x02\x13\x1a\x1a\
    \x20Is\x20the\x20symbol\x20read\x20here?\n\n\r\n\x05\x05\x02\x02\x04\x01\
    \x12\x04\x9c\x01\x02\x0c\n\r\n\x05\x05\x02\x02\x04\x02\x12\x04\x9c\x01\
    \x0f\x12\n0\n\x04\x05\x02\x02\x05\x12\x04\x9e\x01\x02\x13\x1a\"\x20Is\
    \x20the\x20symbol\x20in\x20generated\x20code?\n\n\r\n\x05\x05\x02\x02\
    \x05\x01\x12\x04\x9e\x01\x02\x0b\n\r\n\x05\x05\x02\x02\x05\x02\x12\x04\
    \x9e\x01\x0e\x12\n+\n\x04\x05\x02\x02\x06\x12\x04\xa0\x01\x02\x0e\x1a\
    \x1d\x20Is\x20the\x20symbol\x20in\x20test\x20code?\n\n\r\n\x05\x05\x02\
    \x02\x06\x01\x12\x04\xa0\x01\x02\x06\n\r\n\x05\x05\x02\x02\x06\x02\x12\
    \x04\xa0\x01\t\r\n\x0c\n\x02\x05\x03\x12\x06\xa3\x01\0\xae\x01\x01\n\x0b\
    \n\x03\x05\x03\x01\x12\x04\xa3\x01\x05\x0f\n\x0c\n\x04\x05\x03\x02\0\x12\
    \x04\xa4\x01\x02\x1c\n\r\n\x05\x05\x03\x02\0\x01\x12\x04\xa4\x01\x02\x17\
    \n\r\n\x05\x05\x03\x02\0\x02\x12\x04\xa4\x01\x1a\x1b\n\x0c\n\x04\x05\x03\
    \x02\x01\x12\x04\xa5\x01\x02\x14\n\r\n\x05\x05\x03\x02\x01\x01\x12\x04\
    \xa5\x01\x02\x0f\n\r\n\x05\x05\x03\x02\x01\x02\x12\x04\xa5\x01\x12\x13\n\
    \x0c\n\x04\x05\x03\x02\x02\x12\x04\xa6\x01\x02\x15\n\r\n\x05\x05\x03\x02\
    \x02\x01\x12\x04\xa6\x01\x02\x10\n\r\n\x05\x05\x03\x02\x02\x02\x12\x04\
    \xa6\x01\x13\x14\n\x0c\n\x04\x05\x03\x02\x03\x12\x04\xa7\x01\x02\x11\n\r\
    \n\x05\x05\x03\x02\x03\x01\x12\x04\xa7\x01\x02\x0c\n\r\n\x05\x05\x03\x02\
    \x03\x02\x12\x04\xa7\x01\x0f\x10\n\x0c\n\x04\x05\x03\x02\x04\x12\x04\xa8\
    \x01\x02\x17\n\r\n\x05\x05\x03\x02\x04\x01\x12\x04\xa8\x01\x02\x12\n\r\n\
    \x05\x05\x03\x02\x04\x02\x12\x04\xa8\x01\x15\x16\n\x0c\n\x04\x05\x03\x02\
    \x05\x12\x04\xa9\x01\x02\x15\n\r\n\x05\x05\x03\x02\x05\x01\x12\x04\xa9\
    \x01\x02\x10\n\r\n\x05\x05\x03\x02\x05\x02\x12\x04\xa9\x01\x13\x14\n\x0c\
    \n\x04\x05\x03\x02\x06\x12\x04\xaa\x01\x02\x15\n\r\n\x05\x05\x03\x02\x06\
    \x01\x12\x04\xaa\x01\x02\x10\n\r\n\x05\x05\x03\x02\x06\x02\x12\x04\xaa\
    \x01\x13\x14\n\x0c\n\x04\x05\x03\x02\x07\x12\x04\xab\x01\x02\x16\n\r\n\
    \x05\x05\x03\x02\x07\x01\x12\x04\xab\x01\x02\x11\n\r\n\x05\x05\x03\x02\
    \x07\x02\x12\x04\xab\x01\x14\x15\n\x0c\n\x04\x05\x03\x02\x08\x12\x04\xac\
    \x01\x02\x17\n\r\n\x05\x05\x03\x02\x08\x01\x12\x04\xac\x01\x02\x12\n\r\n\
    \x05\x05\x03\x02\x08\x02\x12\x04\xac\x01\x15\x16\n\x0c\n\x04\x05\x03\x02\
    \t\x12\x04\xad\x01\x02\x18\n\r\n\x05\x05\x03\x02\t\x01\x12\x04\xad\x01\
    \x02\x13\n\r\n\x05\x05\x03\x02\t\x02\x12\x04\xad\x01\x16\x17\ng\n\x02\
    \x04\x05\x12\x06\xb2\x01\0\xd4\x01\x01\x1aY\x20Occurrence\x20associates\
    \x20a\x20source\x20position\x20with\x20a\x20symbol\x20and/or\x20highligh\
    ting\n\x20information.\n\n\x0b\n\x03\x04\x05\x01\x12\x04\xb2\x01\x08\x12\
    \n\xc7\x07\n\x04\x04\x05\x02\0\x12\x04\xc5\x01\x02\x1b\x1a\xb8\x07\x20So\
    urce\x20position\x20of\x20this\x20occurrence.\x20Must\x20be\x20exactly\
    \x20three\x20or\x20four\n\x20elements:\n\n\x20-\x20Four\x20elements:\x20\
    `[startLine,\x20startCharacter,\x20endLine,\x20endCharacter]`\n\x20-\x20\
    Three\x20elements:\x20`[startLine,\x20startCharacter,\x20endCharacter]`.\
    \x20The\x20end\x20line\n\x20\x20\x20is\x20inferred\x20to\x20have\x20the\
    \x20same\x20value\x20as\x20the\x20start\x20line.\n\n\x20Line\x20numbers\
    \x20and\x20characters\x20are\x20always\x200-based.\x20Make\x20sure\x20to\
    \x20increment\x20the\n\x20line/character\x20values\x20before\x20displayi\
    ng\x20them\x20in\x20an\x20editor-like\x20UI\x20because\n\x20editors\x20c\
    onventionally\x20use\x201-based\x20numbers.\n\n\x20Historical\x20note:\
    \x20the\x20original\x20draft\x20of\x20this\x20schema\x20had\x20a\x20`Ran\
    ge`\x20message\n\x20type\x20with\x20`start`\x20and\x20`end`\x20fields\
    \x20of\x20type\x20`Position`,\x20mirroring\x20LSP.\n\x20Benchmarks\x20re\
    vealed\x20that\x20this\x20encoding\x20was\x20inefficient\x20and\x20that\
    \x20we\x20could\n\x20reduce\x20the\x20total\x20payload\x20size\x20of\x20\
    an\x20index\x20by\x2050%\x20by\x20using\x20`repeated\x20int32`\n\x20inst\
    ead.\x20\x20The\x20`repeated\x20int32`\x20encoding\x20is\x20admittedly\
    \x20more\x20embarrassing\x20to\n\x20work\x20with\x20in\x20some\x20progra\
    mming\x20languages\x20but\x20we\x20hope\x20the\x20performance\n\x20impro\
    vements\x20make\x20up\x20for\x20it.\n\n\r\n\x05\x04\x05\x02\0\x04\x12\
    \x04\xc5\x01\x02\n\n\r\n\x05\x04\x05\x02\0\x05\x12\x04\xc5\x01\x0b\x10\n\
    \r\n\x05\x04\x05\x02\0\x01\x12\x04\xc5\x01\x11\x16\n\r\n\x05\x04\x05\x02\
    \0\x03\x12\x04\xc5\x01\x19\x1a\n\x8a\x01\n\x04\x04\x05\x02\x01\x12\x04\
    \xc8\x01\x02\x14\x1a|\x20(optional)\x20The\x20symbol\x20that\x20appears\
    \x20at\x20this\x20position.\x20See\n\x20`SymbolInformation.symbol`\x20fo\
    r\x20how\x20to\x20format\x20symbols\x20as\x20strings.\n\n\r\n\x05\x04\
    \x05\x02\x01\x05\x12\x04\xc8\x01\x02\x08\n\r\n\x05\x04\x05\x02\x01\x01\
    \x12\x04\xc8\x01\t\x0f\n\r\n\x05\x04\x05\x02\x01\x03\x12\x04\xc8\x01\x12\
    \x13\n\x8a\x01\n\x04\x04\x05\x02\x02\x12\x04\xcb\x01\x02\x19\x1a|\x20(op\
    tional)\x20Bitmask\x20for\x20what\x20`SymbolRole`\x20apply\x20to\x20this\
    \x20occurrence.\x20See\n\x20`SymbolRole`\x20for\x20how\x20to\x20read\x20\
    and\x20write\x20this\x20field.\n\n\r\n\x05\x04\x05\x02\x02\x05\x12\x04\
    \xcb\x01\x02\x07\n\r\n\x05\x04\x05\x02\x02\x01\x12\x04\xcb\x01\x08\x14\n\
    \r\n\x05\x04\x05\x02\x02\x03\x12\x04\xcb\x01\x17\x18\n\xf0\x02\n\x04\x04\
    \x05\x02\x03\x12\x04\xd1\x01\x02-\x1a\xe1\x02\x20(optional)\x20Markdown-\
    formatted\x20documentation\x20for\x20this\x20specific\x20range.\x20\x20I\
    f\n\x20empty,\x20the\x20`Symbol.documentation`\x20field\x20is\x20used\
    \x20instead.\x20One\x20example\n\x20where\x20this\x20field\x20might\x20b\
    e\x20useful\x20is\x20when\x20the\x20symbol\x20represents\x20a\x20generic\
    \n\x20function\x20(with\x20abstract\x20type\x20parameters\x20such\x20as\
    \x20`List<T>`)\x20and\x20at\x20this\n\x20occurrence\x20we\x20know\x20the\
    \x20exact\x20values\x20(such\x20as\x20`List<String>`).\n\n\r\n\x05\x04\
    \x05\x02\x03\x04\x12\x04\xd1\x01\x02\n\n\r\n\x05\x04\x05\x02\x03\x05\x12\
    \x04\xd1\x01\x0b\x11\n\r\n\x05\x04\x05\x02\x03\x01\x12\x04\xd1\x01\x12(\
    \n\r\n\x05\x04\x05\x02\x03\x03\x12\x04\xd1\x01+,\nX\n\x04\x04\x05\x02\
    \x04\x12\x04\xd3\x01\x02\x1d\x1aJ\x20(optional)\x20What\x20syntax\x20hig\
    hlighting\x20class\x20should\x20be\x20used\x20for\x20this\x20range?\n\n\
    \r\n\x05\x04\x05\x02\x04\x06\x12\x04\xd3\x01\x02\x0c\n\r\n\x05\x04\x05\
    \x02\x04\x01\x12\x04\xd3\x01\r\x18\n\r\n\x05\x04\x05\x02\x04\x03\x12\x04\
    \xd3\x01\x1b\x1cb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
